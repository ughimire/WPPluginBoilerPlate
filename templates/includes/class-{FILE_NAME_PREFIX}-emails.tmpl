<?php

if ( ! defined( 'ABSPATH' ) ) {
	exit; // Exit if accessed directly
}

/**
 * Transactional Emails Controller
 *
 * {PLUGIN_NAME} Emails Class which handles the sending on transactional emails and email templates. This class loads in available emails.
 *
 * @class 		{PLUGIN_CLASS_PREFIX}_Emails
 * @version		2.3.0
 * @package		{PLUGIN_MAIN_CLASS_NAME}/Classes/Emails
 * @category	Class
 * @author 		{AUTHOR}
 */
class {PLUGIN_CLASS_PREFIX}_Emails {

	/** @var array Array of email notification classes */
	public $emails;

	/** @var {PLUGIN_CLASS_PREFIX}_Emails The single instance of the class */
	protected static $_instance = null;

	/**
	 * Background emailer class.
	 */
	protected static $background_emailer;

	/**
	 * Main {PLUGIN_CLASS_PREFIX}_Emails Instance.
	 *
	 * Ensures only one instance of {PLUGIN_CLASS_PREFIX}_Emails is loaded or can be loaded.
	 *
	 * @since {VERSION}
	 * @static
	 * @return {PLUGIN_CLASS_PREFIX}_Emails Main instance
	 */
	public static function instance() {
		if ( is_null( self::$_instance ) ) {
			self::$_instance = new self();
		}
		return self::$_instance;
	}

	/**
	 * Cloning is forbidden.
	 *
	 * @since {VERSION}
	 */
	public function __clone() {
		_doing_it_wrong( __FUNCTION__, __( 'Cheatin&#8217; huh?', '{TEXT_DOMAIN}' ), '2.1' );
	}

	/**
	 * Unserializing instances of this class is forbidden.
	 *
	 * @since {VERSION}
	 */
	public function __wakeup() {
		_doing_it_wrong( __FUNCTION__, __( 'Cheatin&#8217; huh?', '{TEXT_DOMAIN}' ), '2.1' );
	}

	/**
	 * Hook in all transactional emails.
	 */
	public static function init_transactional_emails() {
		$email_actions = apply_filters( '{PLUGIN_HOOK_CLASS_NAME}_email_actions', array(
			'{PLUGIN_HOOK_CLASS_NAME}_low_stock',
			'{PLUGIN_HOOK_CLASS_NAME}_no_stock',
			'{PLUGIN_HOOK_CLASS_NAME}_product_on_backorder',
			'{PLUGIN_HOOK_CLASS_NAME}_order_status_pending_to_processing',
			'{PLUGIN_HOOK_CLASS_NAME}_order_status_pending_to_completed',
			'{PLUGIN_HOOK_CLASS_NAME}_order_status_processing_to_cancelled',
			'{PLUGIN_HOOK_CLASS_NAME}_order_status_pending_to_failed',
			'{PLUGIN_HOOK_CLASS_NAME}_order_status_pending_to_on-hold',
			'{PLUGIN_HOOK_CLASS_NAME}_order_status_failed_to_processing',
			'{PLUGIN_HOOK_CLASS_NAME}_order_status_failed_to_completed',
			'{PLUGIN_HOOK_CLASS_NAME}_order_status_failed_to_on-hold',
			'{PLUGIN_HOOK_CLASS_NAME}_order_status_on-hold_to_processing',
			'{PLUGIN_HOOK_CLASS_NAME}_order_status_on-hold_to_cancelled',
			'{PLUGIN_HOOK_CLASS_NAME}_order_status_on-hold_to_failed',
			'{PLUGIN_HOOK_CLASS_NAME}_order_status_completed',
			'{PLUGIN_HOOK_CLASS_NAME}_order_fully_refunded',
			'{PLUGIN_HOOK_CLASS_NAME}_order_partially_refunded',
			'{PLUGIN_HOOK_CLASS_NAME}_new_customer_note',
			'{PLUGIN_HOOK_CLASS_NAME}_created_customer',
		) );

		if ( apply_filters( '{PLUGIN_HOOK_CLASS_NAME}_defer_transactional_emails', false ) ) {
			self::$background_emailer = new {PLUGIN_CLASS_PREFIX}_Background_Emailer();

			foreach ( $email_actions as $action ) {
				add_action( $action, array( __CLASS__, 'queue_transactional_email' ), 10, 10 );
			}
		} else {
			foreach ( $email_actions as $action ) {
				add_action( $action, array( __CLASS__, 'send_transactional_email' ), 10, 10 );
			}
		}
	}

	/**
	 * Queues transactional email so it's not sent in current request if enabled,
	 * otherwise falls back to send now.
	 */
	public static function queue_transactional_email() {
		if ( is_a( self::$background_emailer, '{PLUGIN_CLASS_PREFIX}_Background_Emailer' ) ) {
			self::$background_emailer->push_to_queue( array(
'filter' => current_filter(),
'args'   => func_get_args(),
) );
} else {
call_user_func_array( array( __CLASS__, 'send_transactional_email' ), func_get_args() );
}
}

/**
* Init the mailer instance and call the notifications for the current filter.
*
* @internal
*
* @param string $filter Filter name.
* @param array  $args Email args (default: []).
*/
public static function send_queued_transactional_email( $filter = '', $args = array() ) {
if ( apply_filters( '{PLUGIN_HOOK_CLASS_NAME}_allow_send_queued_transactional_email', true, $filter, $args ) ) {
self::instance(); // Init self so emails exist.

// Ensure gateways are loaded in case they need to insert data into the emails.
{PLUGIN_CLASS_PREFIX}()->payment_gateways();
{PLUGIN_CLASS_PREFIX}()->shipping();

do_action_ref_array( $filter . '_notification', $args );
}
}

/**
* Init the mailer instance and call the notifications for the current filter.
*
* @internal
*
* @param array $args Email args (default: []).
*/
public static function send_transactional_email( $args = array() ) {
try {
$args = func_get_args();
self::instance(); // Init self so emails exist.
do_action_ref_array( current_filter() . '_notification', $args );
} catch ( Exception $e ) {
if ( defined( 'WP_DEBUG' ) && WP_DEBUG ) {
trigger_error( 'Transactional email triggered fatal error for callback ' . current_filter(), E_USER_WARNING );
}
}
}

/**
* Constructor for the email class hooks in all emails that can be sent.
*
*/
public function __construct() {
$this->init();

// Email Header, Footer and content hooks
add_action( '{PLUGIN_HOOK_CLASS_NAME}_email_header', array( $this, 'email_header' ) );
add_action( '{PLUGIN_HOOK_CLASS_NAME}_email_footer', array( $this, 'email_footer' ) );
add_action( '{PLUGIN_HOOK_CLASS_NAME}_email_order_details', array( $this, 'order_details' ), 10, 4 );
add_action( '{PLUGIN_HOOK_CLASS_NAME}_email_order_meta', array( $this, 'order_meta' ), 10, 3 );
add_action( '{PLUGIN_HOOK_CLASS_NAME}_email_customer_details', array( $this, 'customer_details' ), 10, 3 );
add_action( '{PLUGIN_HOOK_CLASS_NAME}_email_customer_details', array( $this, 'email_addresses' ), 20, 3 );

// Hooks for sending emails during store events
add_action( '{PLUGIN_HOOK_CLASS_NAME}_low_stock_notification', array( $this, 'low_stock' ) );
add_action( '{PLUGIN_HOOK_CLASS_NAME}_no_stock_notification', array( $this, 'no_stock' ) );
add_action( '{PLUGIN_HOOK_CLASS_NAME}_product_on_backorder_notification', array( $this, 'backorder' ) );
add_action( '{PLUGIN_HOOK_CLASS_NAME}_created_customer_notification', array( $this, 'customer_new_account' ), 10, 3 );

// Let 3rd parties unhook the above via this hook
do_action( '{PLUGIN_HOOK_CLASS_NAME}_email', $this );
}

/**
* Init email classes.
*/
public function init() {
// Include email classes
include_once( dirname( __FILE__ ) . '/emails/class-{FILE_NAME_PREFIX}-email.php' );

$this->emails['{PLUGIN_CLASS_PREFIX}_Email_New_Order'] 		                 = include( 'emails/class-{FILE_NAME_PREFIX}-email-new-order.php' );
$this->emails['{PLUGIN_CLASS_PREFIX}_Email_Cancelled_Order'] 		             = include( 'emails/class-{FILE_NAME_PREFIX}-email-cancelled-order.php' );
$this->emails['{PLUGIN_CLASS_PREFIX}_Email_Failed_Order'] 		                 = include( 'emails/class-{FILE_NAME_PREFIX}-email-failed-order.php' );
$this->emails['{PLUGIN_CLASS_PREFIX}_Email_Customer_On_Hold_Order'] 		     = include( 'emails/class-{FILE_NAME_PREFIX}-email-customer-on-hold-order.php' );
$this->emails['{PLUGIN_CLASS_PREFIX}_Email_Customer_Processing_Order'] 		 = include( 'emails/class-{FILE_NAME_PREFIX}-email-customer-processing-order.php' );
$this->emails['{PLUGIN_CLASS_PREFIX}_Email_Customer_Completed_Order'] 		     = include( 'emails/class-{FILE_NAME_PREFIX}-email-customer-completed-order.php' );
$this->emails['{PLUGIN_CLASS_PREFIX}_Email_Customer_Refunded_Order'] 		     = include( 'emails/class-{FILE_NAME_PREFIX}-email-customer-refunded-order.php' );
$this->emails['{PLUGIN_CLASS_PREFIX}_Email_Customer_Invoice'] 		             = include( 'emails/class-{FILE_NAME_PREFIX}-email-customer-invoice.php' );
$this->emails['{PLUGIN_CLASS_PREFIX}_Email_Customer_Note'] 		             = include( 'emails/class-{FILE_NAME_PREFIX}-email-customer-note.php' );
$this->emails['{PLUGIN_CLASS_PREFIX}_Email_Customer_Reset_Password'] 		     = include( 'emails/class-{FILE_NAME_PREFIX}-email-customer-reset-password.php' );
$this->emails['{PLUGIN_CLASS_PREFIX}_Email_Customer_New_Account'] 		         = include( 'emails/class-{FILE_NAME_PREFIX}-email-customer-new-account.php' );

$this->emails = apply_filters( '{PLUGIN_HOOK_CLASS_NAME}_email_classes', $this->emails );

// include css inliner
if ( ! class_exists( 'Emogrifier' ) && class_exists( 'DOMDocument' ) ) {
include_once( dirname( __FILE__ ) . '/libraries/class-emogrifier.php' );
}
}

/**
* Return the email classes - used in admin to load settings.
*
* @return array
*/
public function get_emails() {
return $this->emails;
}

/**
* Get from name for email.
*
* @return string
*/
public function get_from_name() {
return wp_specialchars_decode( get_option( '{PLUGIN_HOOK_CLASS_NAME}_email_from_name' ), ENT_QUOTES );
}

/**
* Get from email address.
*
* @return string
*/
public function get_from_address() {
return sanitize_email( get_option( '{PLUGIN_HOOK_CLASS_NAME}_email_from_address' ) );
}

/**
* Get the email header.
*
* @param mixed $email_heading heading for the email
*/
public function email_header( $email_heading ) {
{FILE_NAME_PREFIX}_get_template( 'emails/email-header.php', array( 'email_heading' => $email_heading ) );
}

/**
* Get the email footer.
*/
public function email_footer() {
{FILE_NAME_PREFIX}_get_template( 'emails/email-footer.php' );
}

/**
* Wraps a message in the {TEXT_DOMAIN} mail template.
*
* @param mixed $email_heading
* @param string $message
* @param bool $plain_text
*
* @return string
*/
public function wrap_message( $email_heading, $message, $plain_text = false ) {
// Buffer
ob_start();

do_action( '{PLUGIN_HOOK_CLASS_NAME}_email_header', $email_heading );

echo wpautop( wptexturize( $message ) );

do_action( '{PLUGIN_HOOK_CLASS_NAME}_email_footer' );

// Get contents
$message = ob_get_clean();

return $message;
}

/**
* Send the email.
*
* @param mixed $to
* @param mixed $subject
* @param mixed $message
* @param string $headers (default: "Content-Type: text/html\r\n")
* @param string $attachments (default: "")
* @return bool
*/
public function send( $to, $subject, $message, $headers = "Content-Type: text/html\r\n", $attachments = "" ) {
// Send
$email = new {PLUGIN_CLASS_PREFIX}_Email();
return $email->send( $to, $subject, $message, $headers, $attachments );
}

/**
* Prepare and send the customer invoice email on demand.
*
* @param int|{PLUGIN_CLASS_PREFIX}_Order $order
*/
public function customer_invoice( $order ) {
$email = $this->emails['{PLUGIN_CLASS_PREFIX}_Email_Customer_Invoice'];

if ( ! is_object( $order ) ) {
$order = {FILE_NAME_PREFIX}_get_order( absint( $order ) );
}

$email->trigger( $order->get_id(), $order );
}

/**
* Customer new account welcome email.
*
* @param int $customer_id
* @param array $new_customer_data
* @param bool $password_generated
*/
public function customer_new_account( $customer_id, $new_customer_data = array(), $password_generated = false ) {
if ( ! $customer_id ) {
return;
}

$user_pass = ! empty( $new_customer_data['user_pass'] ) ? $new_customer_data['user_pass'] : '';

$email = $this->emails['{PLUGIN_CLASS_PREFIX}_Email_Customer_New_Account'];
$email->trigger( $customer_id, $user_pass, $password_generated );
}

/**
* Show the order details table
*
* @param {PLUGIN_CLASS_PREFIX}_Order $order
* @param bool $sent_to_admin
* @param bool $plain_text
* @param string $email
*/
public function order_details( $order, $sent_to_admin = false, $plain_text = false, $email = '' ) {
if ( $plain_text ) {
{FILE_NAME_PREFIX}_get_template( 'emails/plain/email-order-details.php', array( 'order' => $order, 'sent_to_admin' => $sent_to_admin, 'plain_text' => $plain_text, 'email' => $email ) );
} else {
{FILE_NAME_PREFIX}_get_template( 'emails/email-order-details.php', array( 'order' => $order, 'sent_to_admin' => $sent_to_admin, 'plain_text' => $plain_text, 'email' => $email ) );
}
}

/**
* Add order meta to email templates.
*
* @param mixed $order
* @param bool $sent_to_admin (default: false)
* @param bool $plain_text (default: false)
* @return string
*/
public function order_meta( $order, $sent_to_admin = false, $plain_text = false ) {
$fields = apply_filters( '{PLUGIN_HOOK_CLASS_NAME}_email_order_meta_fields', array(), $sent_to_admin, $order );

/**
* Deprecated {PLUGIN_HOOK_CLASS_NAME}_email_order_meta_keys filter.
*
* @since {VERSION}
*/
$_fields = apply_filters( '{PLUGIN_HOOK_CLASS_NAME}_email_order_meta_keys', array(), $sent_to_admin );

if ( $_fields ) {
foreach ( $_fields as $key => $field ) {
if ( is_numeric( $key ) ) {
$key = $field;
}

$fields[ $key ] = array(
'label' => wptexturize( $key ),
'value' => wptexturize( get_post_meta( $order->get_id(), $field, true ) ),
);
}
}

if ( $fields ) {

if ( $plain_text ) {

foreach ( $fields as $field ) {
if ( isset( $field['label'] ) && isset( $field['value'] ) && $field['value'] ) {
echo $field['label'] . ': ' . $field['value'] . "\n";
}
}
} else {

foreach ( $fields as $field ) {
if ( isset( $field['label'] ) && isset( $field['value'] ) && $field['value'] ) {
echo '<p><strong>' . $field['label'] . ':</strong> ' . $field['value'] . '</p>';
}
}
}
}
}

/**
* Is customer detail field valid?
* @param  array  $field
* @return boolean
*/
public function customer_detail_field_is_valid( $field ) {
return isset( $field['label'] ) && ! empty( $field['value'] );
}

/**
* Add customer details to email templates.
*
* @param {PLUGIN_CLASS_PREFIX}_Order $order
* @param bool $sent_to_admin (default: false)
* @param bool $plain_text (default: false)
* @return string
*/
public function customer_details( $order, $sent_to_admin = false, $plain_text = false ) {
if ( ! is_a( $order, '{PLUGIN_CLASS_PREFIX}_Order' ) ) {
return;
}
$fields = array();

if ( $order->get_customer_note() ) {
$fields['customer_note'] = array(
'label' => __( 'Note', '{TEXT_DOMAIN}' ),
'value' => wptexturize( $order->get_customer_note() ),
);
}

if ( $order->get_billing_email() ) {
$fields['billing_email'] = array(
'label' => __( 'Email address', '{TEXT_DOMAIN}' ),
'value' => wptexturize( $order->get_billing_email() ),
);
}

if ( $order->get_billing_phone() ) {
$fields['billing_phone'] = array(
'label' => __( 'Phone', '{TEXT_DOMAIN}' ),
'value' => wptexturize( $order->get_billing_phone() ),
);
}

$fields = array_filter( apply_filters( '{PLUGIN_HOOK_CLASS_NAME}_email_customer_details_fields', $fields, $sent_to_admin, $order ), array( $this, 'customer_detail_field_is_valid' ) );

if ( $plain_text ) {
{FILE_NAME_PREFIX}_get_template( 'emails/plain/email-customer-details.php', array( 'fields' => $fields ) );
} else {
{FILE_NAME_PREFIX}_get_template( 'emails/email-customer-details.php', array( 'fields' => $fields ) );
}
}

/**
* Get the email addresses.
*
* @param {PLUGIN_CLASS_PREFIX}_Order $order
* @param bool $sent_to_admin
* @param bool $plain_text
*/
public function email_addresses( $order, $sent_to_admin = false, $plain_text = false ) {
if ( ! is_a( $order, '{PLUGIN_CLASS_PREFIX}_Order' ) ) {
return;
}
if ( $plain_text ) {
{FILE_NAME_PREFIX}_get_template( 'emails/plain/email-addresses.php', array( 'order' => $order ) );
} else {
{FILE_NAME_PREFIX}_get_template( 'emails/email-addresses.php', array( 'order' => $order ) );
}
}

/**
* Get blog name formatted for emails.
* @return string
*/
private function get_blogname() {
return wp_specialchars_decode( get_option( 'blogname' ), ENT_QUOTES );
}

/**
* Low stock notification email.
*
* @param {PLUGIN_CLASS_PREFIX}_Product $product
*/
public function low_stock( $product ) {
if ( 'no' === get_option( '{PLUGIN_HOOK_CLASS_NAME}_notify_low_stock', 'yes' ) ) {
return;
}

$subject = sprintf( '[%s] %s', $this->get_blogname(), __( 'Product low in stock', '{TEXT_DOMAIN}' ) );
/* translators: 1: product name 2: items in stock */
$message = sprintf(
__( '%1$s is low in stock. There are %2$d left.', '{TEXT_DOMAIN}' ),
html_entity_decode( strip_tags( $product->get_formatted_name() ), ENT_QUOTES, get_bloginfo( 'charset' ) ),
html_entity_decode( strip_tags( $product->get_stock_quantity() ) )
);

wp_mail(
apply_filters( '{PLUGIN_HOOK_CLASS_NAME}_email_recipient_low_stock', get_option( '{PLUGIN_HOOK_CLASS_NAME}_stock_email_recipient' ), $product ),
apply_filters( '{PLUGIN_HOOK_CLASS_NAME}_email_subject_low_stock', $subject, $product ),
apply_filters( '{PLUGIN_HOOK_CLASS_NAME}_email_content_low_stock', $message, $product ),
apply_filters( '{PLUGIN_HOOK_CLASS_NAME}_email_headers', '', 'low_stock', $product ),
apply_filters( '{PLUGIN_HOOK_CLASS_NAME}_email_attachments', array(), 'low_stock', $product )
);
}

/**
* No stock notification email.
*
* @param {PLUGIN_CLASS_PREFIX}_Product $product
*/
public function no_stock( $product ) {
if ( 'no' === get_option( '{PLUGIN_HOOK_CLASS_NAME}_notify_no_stock', 'yes' ) ) {
return;
}

$subject = sprintf( '[%s] %s', $this->get_blogname(), __( 'Product out of stock', '{TEXT_DOMAIN}' ) );
/* translators: %s: product name */
$message = sprintf( __( '%s is out of stock.', '{TEXT_DOMAIN}' ), html_entity_decode( strip_tags( $product->get_formatted_name() ), ENT_QUOTES, get_bloginfo( 'charset' ) ) );

wp_mail(
apply_filters( '{PLUGIN_HOOK_CLASS_NAME}_email_recipient_no_stock', get_option( '{PLUGIN_HOOK_CLASS_NAME}_stock_email_recipient' ), $product ),
apply_filters( '{PLUGIN_HOOK_CLASS_NAME}_email_subject_no_stock', $subject, $product ),
apply_filters( '{PLUGIN_HOOK_CLASS_NAME}_email_content_no_stock', $message, $product ),
apply_filters( '{PLUGIN_HOOK_CLASS_NAME}_email_headers', '', 'no_stock', $product ),
apply_filters( '{PLUGIN_HOOK_CLASS_NAME}_email_attachments', array(), 'no_stock', $product )
);
}

/**
* Backorder notification email.
*
* @param array $args
*/
public function backorder( $args ) {
$args = wp_parse_args( $args, array(
'product'  => '',
'quantity' => '',
'order_id' => '',
) );

extract( $args );

if ( ! $product || ! $quantity || ! ( $order = {FILE_NAME_PREFIX}_get_order( $order_id ) ) ) {
return;
}

$subject = sprintf( '[%s] %s', $this->get_blogname(), __( 'Product backorder', '{TEXT_DOMAIN}' ) );
$message = sprintf( __( '%1$s units of %2$s have been backordered in order #%3$s.', '{TEXT_DOMAIN}' ), $quantity, html_entity_decode( strip_tags( $product->get_formatted_name() ), ENT_QUOTES, get_bloginfo( 'charset' ) ), $order->get_order_number() );

wp_mail(
apply_filters( '{PLUGIN_HOOK_CLASS_NAME}_email_recipient_backorder', get_option( '{PLUGIN_HOOK_CLASS_NAME}_stock_email_recipient' ), $args ),
apply_filters( '{PLUGIN_HOOK_CLASS_NAME}_email_subject_backorder', $subject, $args ),
apply_filters( '{PLUGIN_HOOK_CLASS_NAME}_email_content_backorder', $message, $args ),
apply_filters( '{PLUGIN_HOOK_CLASS_NAME}_email_headers', '', 'backorder', $args ),
apply_filters( '{PLUGIN_HOOK_CLASS_NAME}_email_attachments', array(), 'backorder', $args )
);
}

/**
* Adds Schema.org markup for order in JSON-LD format.
*
* @deprecated 3.0.0
* @see {PLUGIN_CLASS_PREFIX}_Structured_Data::generate_order_data()
*
* @since {VERSION}
* @param mixed $order
* @param bool $sent_to_admin (default: false)
* @param bool $plain_text (default: false)
*/
public function order_schema_markup( $order, $sent_to_admin = false, $plain_text = false ) {
{FILE_NAME_PREFIX}_deprecated_function( '{PLUGIN_CLASS_PREFIX}_Emails::order_schema_markup', '3.0', '{PLUGIN_CLASS_PREFIX}_Structured_Data::generate_order_data' );

{PLUGIN_CLASS_PREFIX}()->structured_data->generate_order_data( $order, $sent_to_admin, $plain_text );
{PLUGIN_CLASS_PREFIX}()->structured_data->output_structured_data();
}
}

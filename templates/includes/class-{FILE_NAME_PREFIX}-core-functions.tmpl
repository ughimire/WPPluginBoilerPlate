<?php
/**
 * {PLUGIN_NAME} Core Functions
 *
 * General core functions available on both the front-end and admin.
 *
 * @author 		{AUTHOR}
 * @category 	Core
 * @package 	{PLUGIN_MAIN_CLASS_NAME}/Functions
 * @version     {VERSION}
 */

if ( ! defined( 'ABSPATH' ) ) {
	exit;
}

// Include core functions (available in both admin and frontend).
include( '{FILE_NAME_PREFIX}-conditional-functions.php' );

/**
 * Define a constant if it is not already defined.
 *
 * @since {VERSION}
 * @param  string $name
 * @param  string $value
 */
function {FILE_NAME_PREFIX}_maybe_define_constant( $name, $value ) {
	if ( ! defined( $name ) ) {
		define( $name, $value );
	}
}

/**
 * Get template part (for templates like the shop-loop).
 *
 * {PLUGIN_CLASS_PREFIX}_TEMPLATE_DEBUG_MODE will prevent overrides in themes from taking priority.
 *
 * @access public
 * @param mixed $slug
 * @param string $name (default: '')
 */
function {FILE_NAME_PREFIX}_get_template_part( $slug, $name = '' ) {
	$template = '';

	// Look in yourtheme/slug-name.php and yourtheme/{PLUGIN_FILE_NAME}/slug-name.php
	if ( $name && ! {PLUGIN_CLASS_PREFIX}_TEMPLATE_DEBUG_MODE ) {
		$template = locate_template( array( "{$slug}-{$name}.php", {PLUGIN_CLASS_PREFIX}()->template_path() . "{$slug}-{$name}.php" ) );
	}

	// Get default slug-name.php
	if ( ! $template && $name && file_exists( {PLUGIN_CLASS_PREFIX}()->plugin_path() . "/templates/{$slug}-{$name}.php" ) ) {
		$template = {PLUGIN_CLASS_PREFIX}()->plugin_path() . "/templates/{$slug}-{$name}.php";
	}

	// If template file doesn't exist, look in yourtheme/slug.php and yourtheme/{PLUGIN_FILE_NAME}/slug.php
	if ( ! $template && ! {PLUGIN_CLASS_PREFIX}_TEMPLATE_DEBUG_MODE ) {
		$template = locate_template( array( "{$slug}.php", {PLUGIN_CLASS_PREFIX}()->template_path() . "{$slug}.php" ) );
	}

	// Allow 3rd party plugins to filter template file from their plugin.
	$template = apply_filters( '{FILE_NAME_PREFIX}_get_template_part', $template, $slug, $name );

	if ( $template ) {
		load_template( $template, false );
	}
}

/**
 * Get other templates (e.g. product attributes) passing attributes and including the file.
 *
 * @access public
 * @param string $template_name
 * @param array $args (default: array())
 * @param string $template_path (default: '')
 * @param string $default_path (default: '')
 */
function {FILE_NAME_PREFIX}_get_template( $template_name, $args = array(), $template_path = '', $default_path = '' ) {
	if ( ! empty( $args ) && is_array( $args ) ) {
		extract( $args );
	}

	$located = {FILE_NAME_PREFIX}_locate_template( $template_name, $template_path, $default_path );

	if ( ! file_exists( $located ) ) {
		_doing_it_wrong( __FUNCTION__, sprintf( __( '%s does not exist.', '{TEXT_DOMAIN}' ), '<code>' . $located . '</code>' ), '{VERSION}' );
		return;
	}

	// Allow 3rd party plugin filter template file from their plugin.
	$located = apply_filters( '{FILE_NAME_PREFIX}_get_template', $located, $template_name, $args, $template_path, $default_path );

	do_action( '{PLUGIN_HOOK_CLASS_NAME}_before_template_part', $template_name, $template_path, $located, $args );

	include( $located );

	do_action( '{PLUGIN_HOOK_CLASS_NAME}_after_template_part', $template_name, $template_path, $located, $args );
}


/**
 * Like {FILE_NAME_PREFIX}_get_template, but returns the HTML instead of outputting.
 *
 * @see {FILE_NAME_PREFIX}_get_template
 * @since {VERSION}
 * @param string $template_name
 * @param array $args
 * @param string $template_path
 * @param string $default_path
 *
 * @return string
 */
function {FILE_NAME_PREFIX}_get_template_html( $template_name, $args = array(), $template_path = '', $default_path = '' ) {
	ob_start();
	{FILE_NAME_PREFIX}_get_template( $template_name, $args, $template_path, $default_path );
	return ob_get_clean();
}
/**
 * Locate a template and return the path for inclusion.
 *
 * This is the load order:
 *
 *		yourtheme		/	$template_path	/	$template_name
 *		yourtheme		/	$template_name
 *		$default_path	/	$template_name
 *
 * @access public
 * @param string $template_name
 * @param string $template_path (default: '')
 * @param string $default_path (default: '')
 * @return string
 */
function {FILE_NAME_PREFIX}_locate_template( $template_name, $template_path = '', $default_path = '' ) {
	if ( ! $template_path ) {
		$template_path = {PLUGIN_CLASS_PREFIX}()->template_path();
	}

	if ( ! $default_path ) {
		$default_path = {PLUGIN_CLASS_PREFIX}()->plugin_path() . '/templates/';
	}

	// Look within passed path within the theme - this is priority.
	$template = locate_template(
		array(
			trailingslashit( $template_path ) . $template_name,
			$template_name,
		)
	);

	// Get default template/
	if ( ! $template || {PLUGIN_CLASS_PREFIX}_TEMPLATE_DEBUG_MODE ) {
		$template = $default_path . $template_name;
	}

	// Return what we found.
	return apply_filters( '{PLUGIN_HOOK_CLASS_NAME}_locate_template', $template, $template_name, $template_path );
}


/**
 * Send HTML emails from {PLUGIN_MAIN_CLASS_NAME}.
 *
 * @param mixed $to
 * @param mixed $subject
 * @param mixed $message
 * @param string $headers (default: "Content-Type: text/html\r\n")
 * @param string $attachments (default: "")
 */
function {FILE_NAME_PREFIX}_mail( $to, $subject, $message, $headers = "Content-Type: text/html\r\n", $attachments = "" ) {
	$mailer = {PLUGIN_CLASS_PREFIX}()->mailer();

	$mailer->send( $to, $subject, $message, $headers, $attachments );
}

/**
 * Get an image size.
 *
 * Variable is filtered by {PLUGIN_HOOK_CLASS_NAME}_get_image_size_{image_size}.
 *
 * @param array|string $image_size
 * @return array
 */
function {FILE_NAME_PREFIX}_get_image_size( $image_size ) {
	if ( is_array( $image_size ) ) {
		$width  = isset( $image_size[0] ) ? $image_size[0] : '300';
		$height = isset( $image_size[1] ) ? $image_size[1] : '300';
		$crop   = isset( $image_size[2] ) ? $image_size[2] : 1;

		$size = array(
			'width'  => $width,
			'height' => $height,
			'crop'   => $crop,
		);

		$image_size = $width . '_' . $height;

	} elseif ( in_array( $image_size, array( 'shop_thumbnail', 'shop_catalog', 'shop_single' ) ) ) {
		$size           = get_option( $image_size . '_image_size', array() );
		$size['width']  = isset( $size['width'] ) ? $size['width'] : '300';
		$size['height'] = isset( $size['height'] ) ? $size['height'] : '300';
		$size['crop']   = isset( $size['crop'] ) ? $size['crop'] : 0;

	} else {
		$size = array(
			'width'  => '300',
			'height' => '300',
			'crop'   => 1,
		);
	}

	return apply_filters( '{PLUGIN_HOOK_CLASS_NAME}_get_image_size_' . $image_size, $size );
}

/**
 * Queue some JavaScript code to be output in the footer.
 *
 * @param string $code
 */
function {FILE_NAME_PREFIX}_enqueue_js( $code ) {
	global ${PLUGIN_HOOK_CLASS_NAME}_queued_js;

	if ( empty( ${PLUGIN_HOOK_CLASS_NAME}_queued_js ) ) {
		${PLUGIN_HOOK_CLASS_NAME}_queued_js = '';
	}

	${PLUGIN_HOOK_CLASS_NAME}_queued_js .= "\n" . $code . "\n";
}

/**
 * Output any queued javascript code in the footer.
 */
function {FILE_NAME_PREFIX}_print_js() {
	global ${PLUGIN_HOOK_CLASS_NAME}_queued_js;

	if ( ! empty( ${PLUGIN_HOOK_CLASS_NAME}_queued_js ) ) {
		// Sanitize.
		${PLUGIN_HOOK_CLASS_NAME}_queued_js = wp_check_invalid_utf8( ${PLUGIN_HOOK_CLASS_NAME}_queued_js );
		${PLUGIN_HOOK_CLASS_NAME}_queued_js = preg_replace( '/&#(x)?0*(?(1)27|39);?/i', "'", ${PLUGIN_HOOK_CLASS_NAME}_queued_js );
		${PLUGIN_HOOK_CLASS_NAME}_queued_js = str_replace( "\r", '', ${PLUGIN_HOOK_CLASS_NAME}_queued_js );

		$js = "<!-- {PLUGIN_MAIN_CLASS_NAME} JavaScript -->\n<script type=\"text/javascript\">\njQuery(function($) { ${PLUGIN_HOOK_CLASS_NAME}_queued_js });\n</script>\n";

		/**
		 * {PLUGIN_HOOK_CLASS_NAME}_queued_js filter.
		 *
		 * @since {VERSION}
		 * @param string $js JavaScript code.
		 */
		echo apply_filters( '{PLUGIN_HOOK_CLASS_NAME}_queued_js', $js );

		unset( ${PLUGIN_HOOK_CLASS_NAME}_queued_js );
	}
}

/**
 * Set a cookie - wrapper for setcookie using WP constants.
 *
 * @param  string  $name   Name of the cookie being set.
 * @param  string  $value  Value of the cookie.
 * @param  integer $expire Expiry of the cookie.
 * @param  bool    $secure Whether the cookie should be served only over https.
 */
function {FILE_NAME_PREFIX}_setcookie( $name, $value, $expire = 0, $secure = false ) {
	if ( ! headers_sent() ) {
		setcookie( $name, $value, $expire, COOKIEPATH ? COOKIEPATH : '/', COOKIE_DOMAIN, $secure );
	} elseif ( defined( 'WP_DEBUG' ) && WP_DEBUG ) {
		headers_sent( $file, $line );
		trigger_error( "{$name} cookie cannot be set - headers already sent by {$file} on line {$line}", E_USER_NOTICE );
	}
}

/**
 * Get the URL to the {PLUGIN_NAME} REST API.
 *
 * @since {VERSION}
 * @param string $path an endpoint to include in the URL.
 * @return string the URL.
 */
function get_{PLUGIN_HOOK_CLASS_NAME}_api_url( $path ) {
	$version  = defined( '{PLUGIN_CLASS_PREFIX}_API_REQUEST_VERSION' ) ? {PLUGIN_CLASS_PREFIX}_API_REQUEST_VERSION : substr( {PLUGIN_CLASS_PREFIX}_API::VERSION, 0, 1 );

	$url = get_home_url( null, "{PLUGIN_HOOK_CLASS_NAME}-api/v{$version}/", is_ssl() ? 'https' : 'http' );

	if ( ! empty( $path ) && is_string( $path ) ) {
		$url .= ltrim( $path, '/' );
	}

	return $url;
}

/**
 * Get a log file path.
 *
 * @since {VERSION}
 *
 * @param string $handle name.
 * @return string the log file path.
 */
function {FILE_NAME_PREFIX}_get_log_file_path( $handle ) {
	return {PLUGIN_CLASS_PREFIX}_Log_Handler_File::get_log_file_path( $handle );
}

/**
 * Recursively get page children.
 * @param  int $page_id
 * @return int[]
 */
function {FILE_NAME_PREFIX}_get_page_children( $page_id ) {
	$page_ids = get_posts( array(
		'post_parent' => $page_id,
		'post_type'   => 'page',
		'numberposts' => -1,
		'post_status' => 'any',
		'fields'      => 'ids',
	) );

	if ( ! empty( $page_ids ) ) {
		foreach ( $page_ids as $page_id ) {
			$page_ids = array_merge( $page_ids, {PLUGIN_HOOK_CLASS_NAME}_get_page_children( $page_id ) );
		}
	}

	return $page_ids;
}

/**
 * {PLUGIN_MAIN_CLASS_NAME} Core Supported Themes.
 *
 * @since {VERSION}
 * @return string[]
 */
function {FILE_NAME_PREFIX}_get_core_supported_themes() {
	return array( 'twentyseventeen', 'twentysixteen', 'twentyfifteen', 'twentyfourteen', 'twentythirteen', 'twentyeleven', 'twentytwelve', 'twentyten' );
}

/**
 * Get user agent string.
 * @since {VERSION}
 * @return string
 */
function {FILE_NAME_PREFIX}_get_user_agent() {
	return isset( $_SERVER['HTTP_USER_AGENT'] ) ? strtolower( $_SERVER['HTTP_USER_AGENT'] ) : '';
}

// This function can be removed when WP 3.9.2 or greater is required.
if ( ! function_exists( 'hash_equals' ) ) :
	/**
	 * Compare two strings in constant time.
	 *
	 * This function was added in PHP 5.6.
	 * It can leak the length of a string.
	 *
	 * @since {VERSION}
	 *
	 * @param string $a Expected string.
	 * @param string $b Actual string.
	 * @return bool Whether strings are equal.
	 */
	function hash_equals( $a, $b ) {
		$a_length = strlen( $a );
		if ( strlen( $b ) !== $a_length ) {
			return false;
		}
		$result = 0;

		// Do not attempt to "optimize" this.
		for ( $i = 0; $i < $a_length; $i++ ) {
			$result |= ord( $a[ $i ] ) ^ ord( $b[ $i ] );
		}

		return 0 === $result;
	}
endif;

/**
 * Generate a rand hash.
 *
 * @since {VERSION}
 * @return string
 */
function {PLUGIN_HOOK_CLASS_NAME}_rand_hash() {
	if ( function_exists( 'openssl_random_pseudo_bytes' ) ) {
		return bin2hex( openssl_random_pseudo_bytes( 20 ) );
	} else {
		return sha1( wp_rand() );
	}
}

/**
 * {PLUGIN_CLASS_PREFIX} API - Hash.
 *
 * @since {VERSION}
 * @param  string $data
 * @return string
 */
function {PLUGIN_HOOK_CLASS_NAME}_api_hash( $data ) {
	return hash_hmac( 'sha256', $data, '{FILE_NAME_PREFIX}-api' );
}

/**
 * Find all possible combinations of values from the input array and return in a logical order.
 * @since {VERSION}
 * @param array $input
 * @return array
 */
function {FILE_NAME_PREFIX}_array_cartesian( $input ) {
	$input   = array_filter( $input );
	$results = array();
	$indexes = array();
	$index   = 0;

	// Generate indexes from keys and values so we have a logical sort order
	foreach ( $input as $key => $values ) {
		foreach ( $values as $value ) {
			$indexes[ $key ][ $value ] = $index++;
		}
	}

	// Loop over the 2D array of indexes and generate all combinations
	foreach ( $indexes as $key => $values ) {
		// When result is empty, fill with the values of the first looped array
		if ( empty( $results ) ) {
			foreach ( $values as $value ) {
				$results[] = array( $key => $value );
			}

		// Second and subsequent input sub-array merging.
		} else {
			foreach ( $results as $result_key => $result ) {
				foreach ( $values as $value ) {
					// If the key is not set, we can set it
					if ( ! isset( $results[ $result_key ][ $key ] ) ) {
						$results[ $result_key ][ $key ] = $value;
					// If the key is set, we can add a new combination to the results array
					} else {
						$new_combination         = $results[ $result_key ];
						$new_combination[ $key ] = $value;
						$results[]               = $new_combination;
					}
				}
			}
		}
	}

	// Sort the indexes
	arsort( $results );

	// Convert indexes back to values
	foreach ( $results as $result_key => $result ) {
		$converted_values = array();

		// Sort the values
		arsort( $results[ $result_key ] );

		// Convert the values
		foreach ( $results[ $result_key ] as $key => $value ) {
			$converted_values[ $key ] = array_search( $value, $indexes[ $key ] );
		}

		$results[ $result_key ] = $converted_values;
	}

	return $results;
}

/**
 * Run a MySQL transaction query, if supported.
 * @param string $type start (default), commit, rollback
 * @since {VERSION}
 */
function {FILE_NAME_PREFIX}_transaction_query( $type = 'start' ) {
	global $wpdb;

	$wpdb->hide_errors();

	if ( ! defined( '{PLUGIN_CLASS_PREFIX}_USE_TRANSACTIONS' ) ) {
		define( '{PLUGIN_CLASS_PREFIX}_USE_TRANSACTIONS', true );
	}

	if ( {PLUGIN_CLASS_PREFIX}_USE_TRANSACTIONS ) {
		switch ( $type ) {
			case 'commit' :
				$wpdb->query( 'COMMIT' );
				break;
			case 'rollback' :
				$wpdb->query( 'ROLLBACK' );
				break;
			default :
				$wpdb->query( 'START TRANSACTION' );
			break;
		}
	}
}


/**
 * Outputs a "back" link so admin screens can easily jump back a page.
 *
 * @param string $label Title of the page to return to.
 * @param string $url   URL of the page to return to.
 */
function {FILE_NAME_PREFIX}_back_link( $label, $url ) {
	echo '<small class="{FILE_NAME_PREFIX}-admin-breadcrumb"><a href="' . esc_url( $url ) . '" aria-label="' . esc_attr( $label ) . '">&#x2934;</a></small>';
}

/**
 * Display a {PLUGIN_MAIN_CLASS_NAME} help tip.
 *
 * @since {VERSION}
 *
 * @param  string $tip        Help tip text
 * @param  bool   $allow_html Allow sanitized HTML if true or escape
 * @return string
 */
function {FILE_NAME_PREFIX}_help_tip( $tip, $allow_html = false ) {
	if ( $allow_html ) {
		$tip = {FILE_NAME_PREFIX}_sanitize_tooltip( $tip );
	} else {
		$tip = esc_attr( $tip );
	}

	return '<span class="{PLUGIN_HOOK_CLASS_NAME}-help-tip" data-tip="' . $tip . '"></span>';
}

/**
 * Return a list of potential postcodes for wildcard searching.
 * @since {VERSION}
 * @param  string $postcode
 * @param  string $country to format postcode for matching.
 * @return string[]
 */
function {FILE_NAME_PREFIX}_get_wildcard_postcodes( $postcode, $country = '' ) {
	$formatted_postcode = {FILE_NAME_PREFIX}_format_postcode( $postcode, $country );
	$length             = function_exists( 'mb_strlen' ) ? mb_strlen( $formatted_postcode ) : strlen( $formatted_postcode );
	$postcodes          = array(
		$postcode,
		$formatted_postcode,
		$formatted_postcode . '*',
	);

	for ( $i = 0; $i < $length; $i ++ ) {
		$postcodes[] = ( function_exists( 'mb_substr' ) ? mb_substr( $formatted_postcode, 0, ( $i + 1 ) * -1 ) : substr( $formatted_postcode, 0, ( $i + 1 ) * -1 ) ) . '*';
	}

	return $postcodes;
}

/**
 * Wrapper for set_time_limit to see if it is enabled.
 * @since {VERSION}
 *
 * @param int $limit
 */
function {FILE_NAME_PREFIX}_set_time_limit( $limit = 0 ) {
	if ( function_exists( 'set_time_limit' ) && false === strpos( ini_get( 'disable_functions' ), 'set_time_limit' ) && ! ini_get( 'safe_mode' ) ) {
		@set_time_limit( $limit );
	}
}


/**
 * Get rounding precision for internal {PLUGIN_MAIN_CLASS_NAME} calculations.
 * Will increase the precision of {PLUGIN_HOOK_CLASS_NAME}_get_price_decimals by 2 decimals, unless {PLUGIN_CLASS_PREFIX}_ROUNDING_PRECISION is set to a higher number.
 *
 * @since {VERSION}
 * @return int
 */
function {FILE_NAME_PREFIX}_get_rounding_precision() {
	$precision = {FILE_NAME_PREFIX}_get_price_decimals() + 2;
	if ( absint( {PLUGIN_CLASS_PREFIX}_ROUNDING_PRECISION ) > $precision ) {
		$precision = absint( {PLUGIN_CLASS_PREFIX}_ROUNDING_PRECISION );
	}
	return $precision;
}

/**
 * Get a shared logger instance.
 *
 * Use the {FILE_NAME_PREFIX}_logging_class filter to change the logging class. You may provide one of the following:
 *     - a class name which will be instantiated as `new $class` with no arguments
 *     - an instance which will be used directly as the logger
 * In either case, the class or instance *must* implement {PLUGIN_CLASS_PREFIX}_Logger_Interface.
 *
 * @see {PLUGIN_CLASS_PREFIX}_Logger_Interface
 *
 * @return {PLUGIN_CLASS_PREFIX}_Logger
 */
function {FILE_NAME_PREFIX}_get_logger() {
	static $logger = null;
	if ( null === $logger ) {
		$class = apply_filters( '{PLUGIN_HOOK_CLASS_NAME}_logging_class', '{PLUGIN_CLASS_PREFIX}_Logger' );
		$implements = class_implements( $class );
		if ( is_array( $implements ) && in_array( '{PLUGIN_CLASS_PREFIX}_Logger_Interface', $implements ) ) {
			if ( is_object( $class ) ) {
				$logger = $class;
			} else {
				$logger = new $class;
			}
		} else {
			_doing_it_wrong(
				__FUNCTION__,
				sprintf(
					__( 'The class <code>%s</code> provided by {PLUGIN_HOOK_CLASS_NAME}_logging_class filter must implement <code>{PLUGIN_CLASS_PREFIX}_Logger_Interface</code>.', '{TEXT_DOMAIN}' ),
					esc_html( is_object( $class ) ? get_class( $class ) : $class )
				),
				'3.0'
			);
			$logger = new {PLUGIN_CLASS_PREFIX}_Logger();
		}
	}
	return $logger;
}

/**
 * Prints human-readable information about a variable.
 *
 * Some server environments blacklist some debugging functions. This function provides a safe way to
 * turn an expression into a printable, readable form without calling blacklisted functions.
 *
 * @since {VERSION}
 *
 * @param mixed $expression The expression to be printed.
 * @param bool $return Optional. Default false. Set to true to return the human-readable string.
 * @return string|bool False if expression could not be printed. True if the expression was printed.
 *     If $return is true, a string representation will be returned.
 */
function {FILE_NAME_PREFIX}_print_r( $expression, $return = false ) {
	$alternatives = array(
		array( 'func' => 'print_r', 'args' => array( $expression, true ) ),
		array( 'func' => 'var_export', 'args' => array( $expression, true ) ),
		array( 'func' => 'json_encode', 'args' => array( $expression ) ),
		array( 'func' => 'serialize', 'args' => array( $expression ) ),
	);

	$alternatives = apply_filters( '{PLUGIN_HOOK_CLASS_NAME}_print_r_alternatives', $alternatives, $expression );

	foreach ( $alternatives as $alternative ) {
		if ( function_exists( $alternative['func'] ) ) {
			$res = call_user_func_array( $alternative['func'], $alternative['args'] );
			if ( $return ) {
				return $res;
			} else {
				echo $res;
				return true;
			}
		}
	}

	return false;
}

/**
 * Registers the default log handler.
 *
 * @since {VERSION}
 * @param array $handlers
 * @return array
 */
function {FILE_NAME_PREFIX}_register_default_log_handler( $handlers ) {

	if ( defined( '{PLUGIN_CLASS_PREFIX}_LOG_HANDLER' ) && class_exists( {PLUGIN_CLASS_PREFIX}_LOG_HANDLER ) ) {
		$handler_class = {PLUGIN_CLASS_PREFIX}_LOG_HANDLER;
		$default_handler = new $handler_class();
	} else {
		$default_handler = new {PLUGIN_CLASS_PREFIX}_Log_Handler_File();
	}

	array_push( $handlers, $default_handler );

	return $handlers;
}
add_filter( '{PLUGIN_HOOK_CLASS_NAME}_register_log_handlers', '{FILE_NAME_PREFIX}_register_default_log_handler' );

/**
 * Store user agents. Used for tracker.
 * @since {VERSION}
 *
 * @param string     $user_login
 * @param int|object $user
 */
function {FILE_NAME_PREFIX}_maybe_store_user_agent( $user_login, $user ) {
	if ( 'yes' === get_option( '{PLUGIN_HOOK_CLASS_NAME}_allow_tracking', 'no' ) && user_can( $user, 'manage_{PLUGIN_HOOK_CLASS_NAME}' ) ) {
		$admin_user_agents   = array_filter( (array) get_option( '{PLUGIN_HOOK_CLASS_NAME}_tracker_ua', array() ) );
		$admin_user_agents[] = {PLUGIN_HOOK_CLASS_NAME}_get_user_agent();
		update_option( '{PLUGIN_HOOK_CLASS_NAME}_tracker_ua', array_unique( $admin_user_agents ) );
	}
}
add_action( 'wp_login', '{FILE_NAME_PREFIX}_maybe_store_user_agent', 10, 2 );

/**
 * Based on wp_list_pluck, this calls a method instead of returning a property.
 *
 * @since {VERSION}
 * @param array      $list      List of objects or arrays
 * @param int|string $callback_or_field     Callback method from the object to place instead of the entire object
 * @param int|string $index_key Optional. Field from the object to use as keys for the new array.
 *                              Default null.
 * @return array Array of values.
 */
function {FILE_NAME_PREFIX}_list_pluck( $list, $callback_or_field, $index_key = null ) {
	// Use wp_list_pluck if this isn't a callback
	$first_el = current( $list );
	if ( ! is_object( $first_el ) || ! is_callable( array( $first_el, $callback_or_field ) ) ) {
		return wp_list_pluck( $list, $callback_or_field, $index_key );
	}
	if ( ! $index_key ) {
		/*
		 * This is simple. Could at some point wrap array_column()
		 * if we knew we had an array of arrays.
		 */
		foreach ( $list as $key => $value ) {
			$list[ $key ] = $value->{$callback_or_field}();
		}
		return $list;
	}

	/*
	 * When index_key is not set for a particular item, push the value
	 * to the end of the stack. This is how array_column() behaves.
	 */
	$newlist = array();
	foreach ( $list as $value ) {
		if ( isset( $value->$index_key ) ) {
			$newlist[ $value->$index_key ] = $value->{$callback_or_field}();
		} else {
			$newlist[] = $value->{$callback_or_field}();
		}
	}
	return $newlist;
}


/**
 * Switch {PLUGIN_MAIN_CLASS_NAME} to site language.
 *
 * @since {VERSION}
 */
function {FILE_NAME_PREFIX}_switch_to_site_locale() {
	if ( function_exists( 'switch_to_locale' ) ) {
		switch_to_locale( get_locale() );

		// Filter on plugin_locale so load_plugin_textdomain loads the correct locale.
		add_filter( 'plugin_locale', 'get_locale' );

		// Init {PLUGIN_CLASS_PREFIX} locale.
		{PLUGIN_CLASS_PREFIX}()->load_plugin_textdomain();
	}
}

/**
 * Switch {PLUGIN_MAIN_CLASS_NAME} language to original.
 *
 * @since {VERSION}
 */
function {FILE_NAME_PREFIX}_restore_locale() {
	if ( function_exists( 'restore_previous_locale' ) ) {
		restore_previous_locale();

		// Remove filter.
		remove_filter( 'plugin_locale', 'get_locale' );

		// Init {PLUGIN_CLASS_PREFIX} locale.
		{PLUGIN_CLASS_PREFIX}()->load_plugin_textdomain();
	}
}

/**
 * Convert plaintext phone number to clickable phone number.
 *
 * Remove formatting and allow "+".
 * Example and specs: https://developer.mozilla.org/en/docs/Web/HTML/Element/a#Creating_a_phone_link
 *
 * @since {VERSION}
 *
 * @param string $phone Content to convert phone number.
 * @return string Content with converted phone number.
 */
function {FILE_NAME_PREFIX}_make_phone_clickable( $phone ) {
	$number = trim( preg_replace( '/[^\d|\+]/', '', $phone ) );

	return '<a href="tel:' . esc_attr( $number ) . '">' . esc_html( $phone ) . '</a>';
}

/**
 * Get an item of post data if set, otherwise return a default value.
 *
 * @since {VERSION}
 * @param  string $key
 * @param  string $default
 * @return mixed value sanitized by {FILE_NAME_PREFIX}_clean
 */
function {FILE_NAME_PREFIX}_get_post_data_by_key( $key, $default = '' ) {
	return {FILE_NAME_PREFIX}_clean( isset( $_POST[ $key ] ) ? $_POST[ $key ] : $default );
}

<?php
/**
 * Setup menus in WP admin.
 *
 * @author   {AUTHOR}
 * @category Admin
 * @package  {PLUGIN_MAIN_CLASS_NAME}/Admin
 * @version  2.5.0
 */

if ( ! defined( 'ABSPATH' ) ) {
	exit;
}

if ( ! class_exists( '{PLUGIN_CLASS_PREFIX}_Admin_Menus', false ) ) :

/**
 * {PLUGIN_CLASS_PREFIX}_Admin_Menus Class.
 */
class {PLUGIN_CLASS_PREFIX}_Admin_Menus {

	/**
	 * Hook in tabs.
	 */
	public function __construct() {
		// Add menus
		add_action( 'admin_menu', array( $this, 'admin_menu' ), 9 );
		add_action( 'admin_menu', array( $this, 'reports_menu' ), 20 );
		add_action( 'admin_menu', array( $this, 'settings_menu' ), 50 );
		add_action( 'admin_menu', array( $this, 'status_menu' ), 60 );

		if ( apply_filters( '{PLUGIN_HOOK_CLASS_NAME}_show_addons_page', true ) ) {
			add_action( 'admin_menu', array( $this, 'addons_menu' ), 70 );
		}

		add_action( 'admin_head', array( $this, 'menu_highlight' ) );
		add_action( 'admin_head', array( $this, 'menu_order_count' ) );
		add_filter( 'menu_order', array( $this, 'menu_order' ) );
		add_filter( 'custom_menu_order', array( $this, 'custom_menu_order' ) );

		// Add endpoints custom URLs in Appearance > Menus > Pages.
add_action( 'admin_head-nav-menus.php', array( $this, 'add_nav_menu_meta_boxes' ) );

// Admin bar menus
if ( apply_filters( '{PLUGIN_HOOK_CLASS_NAME}_show_admin_bar_visit_store', true ) ) {
add_action( 'admin_bar_menu', array( $this, 'admin_bar_menus' ), 31 );
}
}

/**
* Add menu items.
*/
public function admin_menu() {
global $menu;

if ( current_user_can( 'manage_{PLUGIN_HOOK_CLASS_NAME}' ) ) {
$menu[] = array( '', 'read', 'separator-{TEXT_DOMAIN}', '', 'wp-menu-separator {TEXT_DOMAIN}' );
}

add_menu_page( __( '{PLUGIN_MAIN_CLASS_NAME}', '{TEXT_DOMAIN}' ), __( '{PLUGIN_MAIN_CLASS_NAME}', '{TEXT_DOMAIN}' ), 'manage_{PLUGIN_HOOK_CLASS_NAME}', '{TEXT_DOMAIN}', null, null, '55.5' );

add_submenu_page( 'edit.php?post_type=product', __( 'Attributes', '{TEXT_DOMAIN}' ), __( 'Attributes', '{TEXT_DOMAIN}' ), 'manage_product_terms', 'product_attributes', array( $this, 'attributes_page' ) );
}

/**
* Add menu item.
*/
public function reports_menu() {
if ( current_user_can( 'manage_{PLUGIN_HOOK_CLASS_NAME}' ) ) {
add_submenu_page( '{TEXT_DOMAIN}', __( 'Reports', '{TEXT_DOMAIN}' ),  __( 'Reports', '{TEXT_DOMAIN}' ) , 'view_{PLUGIN_HOOK_CLASS_NAME}_reports', '{FILE_NAME_PREFIX}-reports', array( $this, 'reports_page' ) );
} else {
add_menu_page( __( 'Sales reports', '{TEXT_DOMAIN}' ),  __( 'Sales reports', '{TEXT_DOMAIN}' ) , 'view_{PLUGIN_HOOK_CLASS_NAME}_reports', '{FILE_NAME_PREFIX}-reports', array( $this, 'reports_page' ), null, '55.6' );
}
}

/**
* Add menu item.
*/
public function settings_menu() {
$settings_page = add_submenu_page( '{TEXT_DOMAIN}', __( '{PLUGIN_MAIN_CLASS_NAME} settings', '{TEXT_DOMAIN}' ),  __( 'Settings', '{TEXT_DOMAIN}' ) , 'manage_{PLUGIN_HOOK_CLASS_NAME}', '{FILE_NAME_PREFIX}-settings', array( $this, 'settings_page' ) );

add_action( 'load-' . $settings_page, array( $this, 'settings_page_init' ) );
}

/**
* Loads gateways and shipping methods into memory for use within settings.
*/
public function settings_page_init() {
{PLUGIN_CLASS_PREFIX}()->payment_gateways();
{PLUGIN_CLASS_PREFIX}()->shipping();
}

/**
* Add menu item.
*/
public function status_menu() {
add_submenu_page( '{TEXT_DOMAIN}', __( '{PLUGIN_MAIN_CLASS_NAME} status', '{TEXT_DOMAIN}' ),  __( 'Status', '{TEXT_DOMAIN}' ) , 'manage_{PLUGIN_HOOK_CLASS_NAME}', '{FILE_NAME_PREFIX}-status', array( $this, 'status_page' ) );
}

/**
* Addons menu item.
*/
public function addons_menu() {
add_submenu_page( '{TEXT_DOMAIN}', __( '{PLUGIN_MAIN_CLASS_NAME} extensions', '{TEXT_DOMAIN}' ),  __( 'Extensions', '{TEXT_DOMAIN}' ) , 'manage_{PLUGIN_HOOK_CLASS_NAME}', '{FILE_NAME_PREFIX}-addons', array( $this, 'addons_page' ) );
}

/**
* Highlights the correct top level admin menu item for post type add screens.
*/
public function menu_highlight() {
global $parent_file, $submenu_file, $post_type;

switch ( $post_type ) {
case 'shop_order' :
case 'shop_coupon' :
$parent_file = '{TEXT_DOMAIN}';
break;
case 'product' :
$screen = get_current_screen();
if ( $screen && taxonomy_is_product_attribute( $screen->taxonomy ) ) {
$submenu_file = 'product_attributes';
$parent_file  = 'edit.php?post_type=product';
}
break;
}
}

/**
* Adds the order processing count to the menu.
*/
public function menu_order_count() {
global $submenu;

if ( isset( $submenu['{TEXT_DOMAIN}'] ) ) {
// Remove '{PLUGIN_MAIN_CLASS_NAME}' sub menu item
unset( $submenu['{TEXT_DOMAIN}'][0] );

// Add count if user has access
if ( apply_filters( '{PLUGIN_HOOK_CLASS_NAME}_include_processing_order_count_in_menu', true ) && current_user_can( 'manage_{PLUGIN_HOOK_CLASS_NAME}' ) && ( $order_count = {FILE_NAME_PREFIX}_processing_order_count() ) ) {
foreach ( $submenu['{TEXT_DOMAIN}'] as $key => $menu_item ) {
if ( 0 === strpos( $menu_item[0], _x( 'Orders', 'Admin menu name', '{TEXT_DOMAIN}' ) ) ) {
$submenu['{TEXT_DOMAIN}'][ $key ][0] .= ' <span class="awaiting-mod update-plugins count-' . $order_count . '"><span class="processing-count">' . number_format_i18n( $order_count ) . '</span></span>';
break;
}
}
}
}
}

/**
* Reorder the {PLUGIN_CLASS_PREFIX} menu items in admin.
*
* @param mixed $menu_order
* @return array
*/
public function menu_order( $menu_order ) {
// Initialize our custom order array
${PLUGIN_HOOK_CLASS_NAME}_menu_order = array();

// Get the index of our custom separator
${PLUGIN_HOOK_CLASS_NAME}_separator = array_search( 'separator-{TEXT_DOMAIN}', $menu_order );

// Get index of product menu
${PLUGIN_HOOK_CLASS_NAME}_product = array_search( 'edit.php?post_type=product', $menu_order );

// Loop through menu order and do some rearranging
foreach ( $menu_order as $index => $item ) {

if ( ( ( '{TEXT_DOMAIN}' ) == $item ) ) {
${PLUGIN_HOOK_CLASS_NAME}_menu_order[] = 'separator-{TEXT_DOMAIN}';
${PLUGIN_HOOK_CLASS_NAME}_menu_order[] = $item;
${PLUGIN_HOOK_CLASS_NAME}_menu_order[] = 'edit.php?post_type=product';
unset( $menu_order[ ${PLUGIN_HOOK_CLASS_NAME}_separator ] );
unset( $menu_order[ ${PLUGIN_HOOK_CLASS_NAME}_product ] );
} elseif ( ! in_array( $item, array( 'separator-{TEXT_DOMAIN}' ) ) ) {
${PLUGIN_HOOK_CLASS_NAME}_menu_order[] = $item;
}
}

// Return order
return ${PLUGIN_HOOK_CLASS_NAME}_menu_order;
}

/**
* Custom menu order.
*
* @return bool
*/
public function custom_menu_order() {
return current_user_can( 'manage_{PLUGIN_HOOK_CLASS_NAME}' );
}

/**
* Init the reports page.
*/
public function reports_page() {
{PLUGIN_CLASS_PREFIX}_Admin_Reports::output();
}

/**
* Init the settings page.
*/
public function settings_page() {
{PLUGIN_CLASS_PREFIX}_Admin_Settings::output();
}

/**
* Init the attributes page.
*/
public function attributes_page() {
{PLUGIN_CLASS_PREFIX}_Admin_Attributes::output();
}

/**
* Init the status page.
*/
public function status_page() {
{PLUGIN_CLASS_PREFIX}_Admin_Status::output();
}

/**
* Init the addons page.
*/
public function addons_page() {
{PLUGIN_CLASS_PREFIX}_Admin_Addons::output();
}

/**
* Add custom nav meta box.
*
* Adapted from http://www.johnmorrisonline.com/how-to-add-a-fully-functional-custom-meta-box-to-wordpress-navigation-menus/.
*/
public function add_nav_menu_meta_boxes() {
add_meta_box( '{PLUGIN_HOOK_CLASS_NAME}_endpoints_nav_link', __( '{PLUGIN_MAIN_CLASS_NAME} endpoints', '{TEXT_DOMAIN}' ), array( $this, 'nav_menu_links' ), 'nav-menus', 'side', 'low' );
}

/**
* Output menu links.
*/
public function nav_menu_links() {
// Get items from account menu.
$endpoints = {FILE_NAME_PREFIX}_get_account_menu_items();

// Remove dashboard item.
if ( isset( $endpoints['dashboard'] ) ) {
unset( $endpoints['dashboard'] );
}

// Include missing lost password.
$endpoints['lost-password'] = __( 'Lost password', '{TEXT_DOMAIN}' );

$endpoints = apply_filters( '{PLUGIN_HOOK_CLASS_NAME}_custom_nav_menu_items', $endpoints );

?>
<div id="posttype-{TEXT_DOMAIN}-endpoints" class="posttypediv">
    <div id="tabs-panel-{TEXT_DOMAIN}-endpoints" class="tabs-panel tabs-panel-active">
        <ul id="{TEXT_DOMAIN}-endpoints-checklist" class="categorychecklist form-no-clear">
            <?php
					$i = -1;
					foreach ( $endpoints as $key => $value ) :
            ?>
            <li>
                <label class="menu-item-title">
                    <input type="checkbox" class="menu-item-checkbox" name="menu-item[<?php echo esc_attr( $i ); ?>][menu-item-object-id]" value="<?php echo esc_attr( $i ); ?>" /> <?php echo esc_html( $value ); ?>
                </label>
                <input type="hidden" class="menu-item-type" name="menu-item[<?php echo esc_attr( $i ); ?>][menu-item-type]" value="custom" />
                <input type="hidden" class="menu-item-title" name="menu-item[<?php echo esc_attr( $i ); ?>][menu-item-title]" value="<?php echo esc_html( $value ); ?>" />
                <input type="hidden" class="menu-item-url" name="menu-item[<?php echo esc_attr( $i ); ?>][menu-item-url]" value="<?php echo esc_url( {FILE_NAME_PREFIX}_get_account_endpoint_url( $key ) ); ?>" />
                <input type="hidden" class="menu-item-classes" name="menu-item[<?php echo esc_attr( $i ); ?>][menu-item-classes]" />
            </li>
            <?php
						$i--;
					endforeach;
					?>
        </ul>
    </div>
    <p class="button-controls">
				<span class="list-controls">
					<a href="<?php echo admin_url( 'nav-menus.php?page-tab=all&selectall=1#posttype-{TEXT_DOMAIN}-endpoints' ); ?>" class="select-all"><?php _e( 'Select all', '{TEXT_DOMAIN}' ); ?></a>
				</span>
        <span class="add-to-menu">
					<input type="submit" class="button-secondary submit-add-to-menu right" value="<?php esc_attr_e( 'Add to menu', '{TEXT_DOMAIN}' ); ?>" name="add-post-type-menu-item" id="submit-posttype-{TEXT_DOMAIN}-endpoints">
					<span class="spinner"></span>
				</span>
    </p>
</div>
<?php
	}

	/**
	 * Add the "Visit Store" link in admin bar main menu.
	 *
	 * @since {VERSION}
	 * @param WP_Admin_Bar $wp_admin_bar
	 */
	public function admin_bar_menus( $wp_admin_bar ) {
		if ( ! is_admin() || ! is_user_logged_in() ) {
			return;
		}

		// Show only when the user is a member of this site, or they're a super admin.
		if ( ! is_user_member_of_blog() && ! is_super_admin() ) {
			return;
		}

		// Don't display when shop page is the same of the page on front.
		if ( get_option( 'page_on_front' ) == {FILE_NAME_PREFIX}_get_page_id( 'shop' ) ) {
			return;
		}

		// Add an option to visit the store.
		$wp_admin_bar->add_node( array(
'parent' => 'site-name',
'id'     => 'view-store',
'title'  => __( 'Visit Store', '{TEXT_DOMAIN}' ),
'href'   => {FILE_NAME_PREFIX}_get_page_permalink( 'shop' ),
) );
}
}

endif;

return new {PLUGIN_CLASS_PREFIX}_Admin_Menus();

<?php
/**
 * Post Types Admin
 *
 * @author   {PLUGIN_NAME}
 * @category Admin
 * @package  {PLUGIN_MAIN_CLASS_NAME}/Admin
 * @version  {VERSION}
 */

if ( ! defined( 'ABSPATH' ) ) {
	exit;
}

if ( ! class_exists( '{PLUGIN_CLASS_PREFIX}_Admin_Post_Types', false ) ) :

/**
 * {PLUGIN_CLASS_PREFIX}_Admin_Post_Types Class.
 *
 * Handles the edit posts views and some functionality on the edit post screen for {PLUGIN_CLASS_PREFIX} post types.
 */
class {PLUGIN_CLASS_PREFIX}_Admin_Post_Types {

	/**
	 * Constructor.
	 */
	public function __construct() {
		add_filter( 'post_updated_messages', array( $this, 'post_updated_messages' ) );
		add_filter( 'bulk_post_updated_messages', array( $this, 'bulk_post_updated_messages' ), 10, 2 );

		// Disable Auto Save
		add_action( 'admin_print_scripts', array( $this, 'disable_autosave' ) );

		// Extra post data.
		add_action( 'edit_form_top', array( $this, 'edit_form_top' ) );

		add_filter( 'list_table_primary_column', array( $this, 'list_table_primary_column' ), 10, 2 );
		add_filter( 'post_row_actions', array( $this, 'row_actions' ), 100, 2 );

		// Views
		add_filter( 'disable_months_dropdown', array( $this, 'disable_months_dropdown' ), 10, 2 );

		// Bulk / quick edit
		add_action( 'bulk_edit_custom_box', array( $this, 'bulk_edit' ), 10, 2 );
		add_action( 'quick_edit_custom_box',  array( $this, 'quick_edit' ), 10, 2 );
		add_action( 'save_post', array( $this, 'bulk_and_quick_edit_hook' ), 10, 2 );
		add_action( 'admin_notices', array( $this, 'bulk_admin_notices' ) );

		//  Search
		add_filter( 'query_vars', array( $this, 'add_custom_query_var' ) );

		// Filters
		add_action( 'restrict_manage_posts', array( $this, 'restrict_manage_posts' ) );
		add_filter( 'request', array( $this, 'request_query' ) );

		// Edit post screens
		add_filter( 'enter_title_here', array( $this, 'enter_title_here' ), 1, 2 );
		add_action( 'edit_form_after_title', array( $this, 'edit_form_after_title' ) );
		add_filter( 'default_hidden_meta_boxes', array( $this, 'hidden_meta_boxes' ), 10, 2 );

		// Uploads
		add_filter( 'upload_dir', array( $this, 'upload_dir' ) );

		include_once( dirname( __FILE__ ) . '/class-{FILE_NAME_PREFIX}-admin-meta-boxes.php' );

		// Disable DFW feature pointer
		add_action( 'admin_footer', array( $this, 'disable_dfw_feature_pointer' ) );

		// Disable post type view mode options
		add_filter( 'view_mode_post_types', array( $this, 'disable_view_mode_options' ) );

		// Show blank state
		add_action( 'manage_posts_extra_tablenav', array( $this, 'maybe_render_blank_state' ) );

		// Hide template for CPT archive.
		add_filter( 'theme_page_templates', array( $this, 'hide_cpt_archive_templates' ), 10, 3 );
		add_action( 'edit_form_top', array( $this, 'show_cpt_archive_notice' ) );
	}



	/**
	 * Change messages when a post type is updated.
	 * @param  array $messages
	 * @return array
	 */
	public function post_updated_messages( $messages ) {
		global $post, $post_ID;

		$messages['product'] = array(
			0 => '', // Unused. Messages start at index 1.
			1 => sprintf( __( 'Product updated. <a href="%s">View Product</a>', '{TEXT_DOMAIN}' ), esc_url( get_permalink( $post_ID ) ) ),
			2 => __( 'Custom field updated.', '{TEXT_DOMAIN}' ),
			3 => __( 'Custom field deleted.', '{TEXT_DOMAIN}' ),
			4 => __( 'Product updated.', '{TEXT_DOMAIN}' ),
			/* translators: %s: revision title */
			5 => isset( $_GET['revision'] ) ? sprintf( __( 'Product restored to revision from %s', '{TEXT_DOMAIN}' ), wp_post_revision_title( (int) $_GET['revision'], false ) ) : false,
			/* translators: %s: product url */
			6 => sprintf( __( 'Product published. <a href="%s">View Product</a>', '{TEXT_DOMAIN}' ), esc_url( get_permalink( $post_ID ) ) ),
			7 => __( 'Product saved.', '{TEXT_DOMAIN}' ),
			/* translators: %s: product url */
			8 => sprintf( __( 'Product submitted. <a target="_blank" href="%s">Preview product</a>', '{TEXT_DOMAIN}' ), esc_url( add_query_arg( 'preview', 'true', get_permalink( $post_ID ) ) ) ),
			/* translators: 1: date 2: product url */
			9 => sprintf( __( 'Product scheduled for: <strong>%1$s</strong>. <a target="_blank" href="%2$s">Preview product</a>', '{TEXT_DOMAIN}' ),
			  date_i18n( __( 'M j, Y @ G:i', '{TEXT_DOMAIN}' ), strtotime( $post->post_date ) ), esc_url( get_permalink( $post_ID ) ) ),
			/* translators: %s: product url */
			10 => sprintf( __( 'Product draft updated. <a target="_blank" href="%s">Preview product</a>', '{TEXT_DOMAIN}' ), esc_url( add_query_arg( 'preview', 'true', get_permalink( $post_ID ) ) ) ),
		);


		return $messages;
	}

	/**
	 * Specify custom bulk actions messages for different post types.
	 * @param  array $bulk_messages
	 * @param  array $bulk_counts
	 * @return array
	 */
	public function bulk_post_updated_messages( $bulk_messages, $bulk_counts ) {

		$bulk_messages['product'] = array(
			/* translators: %s: product count */
			'updated'   => _n( '%s product updated.', '%s products updated.', $bulk_counts['updated'], '{TEXT_DOMAIN}' ),
			/* translators: %s: product count */
			'locked'    => _n( '%s product not updated, somebody is editing it.', '%s products not updated, somebody is editing them.', $bulk_counts['locked'], '{TEXT_DOMAIN}' ),
			/* translators: %s: product count */
			'deleted'   => _n( '%s product permanently deleted.', '%s products permanently deleted.', $bulk_counts['deleted'], '{TEXT_DOMAIN}' ),
			/* translators: %s: product count */
			'trashed'   => _n( '%s product moved to the Trash.', '%s products moved to the Trash.', $bulk_counts['trashed'], '{TEXT_DOMAIN}' ),
			/* translators: %s: product count */
			'untrashed' => _n( '%s product restored from the Trash.', '%s products restored from the Trash.', $bulk_counts['untrashed'], '{TEXT_DOMAIN}' ),
		);

		return $bulk_messages;
	}

	/**
	 * Define custom columns for products.
	 * @param  array $existing_columns
	 * @return array
	 */
	public function product_columns( $existing_columns ) {
		if ( empty( $existing_columns ) && ! is_array( $existing_columns ) ) {
			$existing_columns = array();
		}

		unset( $existing_columns['title'], $existing_columns['comments'], $existing_columns['date'] );

		$columns          = array();
		$columns['cb']    = '<input type="checkbox" />';
		$columns['thumb'] = '<span class="{FILE_NAME_PREFIX}-image tips" data-tip="' . esc_attr__( 'Image', '{TEXT_DOMAIN}' ) . '">' . __( 'Image', '{TEXT_DOMAIN}' ) . '</span>';
		$columns['name']  = __( 'Name', '{TEXT_DOMAIN}' );

		if ( {FILE_NAME_PREFIX}_product_sku_enabled() ) {
			$columns['sku'] = __( 'SKU', '{TEXT_DOMAIN}' );
		}

		if ( 'yes' === get_option( '{PLUGIN_HOOK_CLASS_NAME}_manage_stock' ) ) {
			$columns['is_in_stock'] = __( 'Stock', '{TEXT_DOMAIN}' );
		}

		$columns['price']        = __( 'Price', '{TEXT_DOMAIN}' );
		$columns['product_cat']  = __( 'Categories', '{TEXT_DOMAIN}' );
		$columns['product_tag']  = __( 'Tags', '{TEXT_DOMAIN}' );
		$columns['featured']     = '<span class="{FILE_NAME_PREFIX}-featured parent-tips" data-tip="' . esc_attr__( 'Featured', '{TEXT_DOMAIN}' ) . '">' . __( 'Featured', '{TEXT_DOMAIN}' ) . '</span>';
		$columns['product_type'] = '<span class="{FILE_NAME_PREFIX}-type parent-tips" data-tip="' . esc_attr__( 'Type', '{TEXT_DOMAIN}' ) . '">' . __( 'Type', '{TEXT_DOMAIN}' ) . '</span>';
		$columns['date']         = __( 'Date', '{TEXT_DOMAIN}' );

		return array_merge( $columns, $existing_columns );

	}

	/**
	 * Make columns sortable - https://gist.github.com/906872.
	 *
	 * @param  array $columns
	 * @return array
	 */
	public function product_sortable_columns( $columns ) {
		$custom = array(
			'price'    => 'price',
			'sku'      => 'sku',
			'name'     => 'title',
		);
		return wp_parse_args( $custom, $columns );
	}

	/**
	 * Set list table primary column for products and orders.
	 * Support for WordPress 4.3.
	 *
	 * @param  string $default
	 * @param  string $screen_id
	 *
	 * @return string
	 */
	public function list_table_primary_column( $default, $screen_id ) {

		if ( 'edit-product' === $screen_id ) {
			return 'name';
		}


		return $default;
	}

	/**
	 * Set row actions for products and orders.
	 *
	 * @param  array $actions
	 * @param  WP_Post $post
	 *
	 * @return array
	 */
	public function row_actions( $actions, $post ) {
		if ( 'product' === $post->post_type ) {
			return array_merge( array( 'id' => 'ID: ' . $post->ID ), $actions );
		}


		return $actions;
	}

	/**
	 * Disable months dropdown on product screen.
	 */
	public function disable_months_dropdown( $bool, $post_type ) {
		return 'product' === $post_type ? true : $bool;
	}

	/**
	 * Custom bulk edit - form.
	 *
	 * @param mixed $column_name
	 * @param mixed $post_type
	 */
	public function bulk_edit( $column_name, $post_type ) {

		if ( 'price' != $column_name || 'product' != $post_type ) {
			return;
		}

		$shipping_class = get_terms( 'product_shipping_class', array(
			'hide_empty' => false,
		) );

		include( {PLUGIN_CLASS_PREFIX}()->plugin_path() . '/includes/admin/views/html-bulk-edit-product.php' );
	}

	/**
	 * Custom quick edit - form.
	 *
	 * @param mixed $column_name
	 * @param mixed $post_type
	 */
	public function quick_edit( $column_name, $post_type ) {

		if ( 'price' != $column_name || 'product' != $post_type ) {
			return;
		}

		$shipping_class = get_terms( 'product_shipping_class', array(
			'hide_empty' => false,
		) );

		include( {PLUGIN_CLASS_PREFIX}()->plugin_path() . '/includes/admin/views/html-quick-edit-product.php' );
	}

	/**
	 * Offers a way to hook into save post without causing an infinite loop
	 * when quick/bulk saving product info.
	 *
	 * @since {VERSION}
	 * @param int    $post_id
	 * @param object $post
	 */
	public function bulk_and_quick_edit_hook( $post_id, $post ) {
		remove_action( 'save_post', array( $this, 'bulk_and_quick_edit_hook' ) );
		do_action( '{PLUGIN_HOOK_CLASS_NAME}_product_bulk_and_quick_edit', $post_id, $post );
		add_action( 'save_post', array( $this, 'bulk_and_quick_edit_hook' ), 10, 2 );
	}

	/**
	 * Quick and bulk edit saving.
	 *
	 * @param int $post_id
	 * @param WP_Post $post
	 * @return int
	 */
	public function bulk_and_quick_edit_save_post( $post_id, $post ) {
		// If this is an autosave, our form has not been submitted, so we don't want to do anything.
		if ( defined( 'DOING_AUTOSAVE' ) && DOING_AUTOSAVE ) {
			return $post_id;
		}

		// Don't save revisions and autosaves
		if ( wp_is_post_revision( $post_id ) || wp_is_post_autosave( $post_id ) ) {
			return $post_id;
		}

		// Check post type is product
		if ( 'product' != $post->post_type ) {
			return $post_id;
		}

		// Check user permission
		if ( ! current_user_can( 'edit_post', $post_id ) ) {
			return $post_id;
		}

		// Check nonces
		if ( ! isset( $_REQUEST['{PLUGIN_HOOK_CLASS_NAME}_quick_edit_nonce'] ) && ! isset( $_REQUEST['{PLUGIN_HOOK_CLASS_NAME}_bulk_edit_nonce'] ) ) {
			return $post_id;
		}
		if ( isset( $_REQUEST['{PLUGIN_HOOK_CLASS_NAME}_quick_edit_nonce'] ) && ! wp_verify_nonce( $_REQUEST['{PLUGIN_HOOK_CLASS_NAME}_quick_edit_nonce'], '{PLUGIN_HOOK_CLASS_NAME}_quick_edit_nonce' ) ) {
			return $post_id;
		}
		if ( isset( $_REQUEST['{PLUGIN_HOOK_CLASS_NAME}_bulk_edit_nonce'] ) && ! wp_verify_nonce( $_REQUEST['{PLUGIN_HOOK_CLASS_NAME}_bulk_edit_nonce'], '{PLUGIN_HOOK_CLASS_NAME}_bulk_edit_nonce' ) ) {
			return $post_id;
		}

		// Get the product and save
		$product = {FILE_NAME_PREFIX}_get_product( $post );

		if ( ! empty( $_REQUEST['{PLUGIN_HOOK_CLASS_NAME}_quick_edit'] ) ) {
			$this->quick_edit_save( $post_id, $product );
		} else {
			$this->bulk_edit_save( $post_id, $product );
		}

		return $post_id;
	}

	/**
	 * Quick edit.
	 *
	 * @param integer    $post_id
	 * @param {PLUGIN_CLASS_PREFIX}_Product $product
	 */
	private function quick_edit_save( $post_id, $product ) {
		$data_store        = $product->get_data_store();
		$old_regular_price = $product->get_regular_price();
		$old_sale_price    = $product->get_sale_price();

		// Save fields
		if ( isset( $_REQUEST['_sku'] ) ) {
			$sku     = $product->get_sku();
			$new_sku = (string) {FILE_NAME_PREFIX}_clean( $_REQUEST['_sku'] );

			if ( $new_sku !== $sku ) {
				if ( ! empty( $new_sku ) ) {
					$unique_sku = {FILE_NAME_PREFIX}_product_has_unique_sku( $post_id, $new_sku );
					if ( $unique_sku ) {
						$product->set_sku( $new_sku );
					}
				} else {
					$product->set_sku( '' );
				}
			}
		}

		if ( isset( $_REQUEST['_weight'] ) ) {
			$product->set_weight( {FILE_NAME_PREFIX}_clean( $_REQUEST['_weight'] ) );
		}

		if ( isset( $_REQUEST['_length'] ) ) {
			$product->set_length( {FILE_NAME_PREFIX}_clean( $_REQUEST['_length'] ) );
		}

		if ( isset( $_REQUEST['_width'] ) ) {
			$product->set_width( {FILE_NAME_PREFIX}_clean( $_REQUEST['_width'] ) );
		}

		if ( isset( $_REQUEST['_height'] ) ) {
			$product->set_height( {FILE_NAME_PREFIX}_clean( $_REQUEST['_height'] ) );
		}

		if ( ! empty( $_REQUEST['_shipping_class'] ) ) {
			if ( '_no_shipping_class' === $_REQUEST['_shipping_class'] ) {
				$product->set_shipping_class_id( 0 );
			} else {
				$shipping_class_id = $data_store->get_shipping_class_id_by_slug( {FILE_NAME_PREFIX}_clean( $_REQUEST['_shipping_class'] ) );
				$product->set_shipping_class_id( $shipping_class_id );
			}
		}

		if ( isset( $_REQUEST['_visibility'] ) ) {
			$product->set_catalog_visibility( {FILE_NAME_PREFIX}_clean( $_REQUEST['_visibility'] ) );
		}

		if ( isset( $_REQUEST['_featured'] ) ) {
			$product->set_featured( true );
		} else {
			$product->set_featured( false );
		}

		if ( isset( $_REQUEST['_tax_status'] ) ) {
			$product->set_tax_status( {FILE_NAME_PREFIX}_clean( $_REQUEST['_tax_status'] ) );
		}

		if ( isset( $_REQUEST['_tax_class'] ) ) {
			$product->set_tax_class( {FILE_NAME_PREFIX}_clean( $_REQUEST['_tax_class'] ) );
		}

		if ( $product->is_type( 'simple' ) || $product->is_type( 'external' ) ) {

			if ( isset( $_REQUEST['_regular_price'] ) ) {
				$new_regular_price = ( '' === $_REQUEST['_regular_price'] ) ? '' : {FILE_NAME_PREFIX}_format_decimal( $_REQUEST['_regular_price'] );
				$product->set_regular_price( $new_regular_price );
			} else {
				$new_regular_price = null;
			}
			if ( isset( $_REQUEST['_sale_price'] ) ) {
				$new_sale_price = ( '' === $_REQUEST['_sale_price'] ) ? '' : {FILE_NAME_PREFIX}_format_decimal( $_REQUEST['_sale_price'] );
				$product->set_sale_price( $new_sale_price );
			} else {
				$new_sale_price = null;
			}

			// Handle price - remove dates and set to lowest
			$price_changed = false;

			if ( ! is_null( $new_regular_price ) && $new_regular_price != $old_regular_price ) {
				$price_changed = true;
			} elseif ( ! is_null( $new_sale_price ) && $new_sale_price != $old_sale_price ) {
				$price_changed = true;
			}

			if ( $price_changed ) {
				$product->set_date_on_sale_to( '' );
				$product->set_date_on_sale_from( '' );
			}
		}

		// Handle Stock Data
		$manage_stock = ! empty( $_REQUEST['_manage_stock'] ) && 'grouped' !== $product->get_type() ? 'yes' : 'no';
		$backorders   = ! empty( $_REQUEST['_backorders'] ) ? {FILE_NAME_PREFIX}_clean( $_REQUEST['_backorders'] ) : 'no';
		$stock_status = ! empty( $_REQUEST['_stock_status'] ) ? {FILE_NAME_PREFIX}_clean( $_REQUEST['_stock_status'] ) : 'instock';
		$stock_amount = 'yes' === $manage_stock ? {FILE_NAME_PREFIX}_stock_amount( $_REQUEST['_stock'] ) : '';

		if ( 'yes' === get_option( '{PLUGIN_HOOK_CLASS_NAME}_manage_stock' ) ) {

			// Apply product type constraints to stock status
			if ( $product->is_type( 'external' ) ) {
				// External always in stock
				$stock_status = 'instock';
			} elseif ( $product->is_type( 'variable' ) ) {
				// Stock status is always determined by children
				foreach ( $product->get_children() as $child_id ) {
					$child = {FILE_NAME_PREFIX}_get_product( $child_id );
					if ( ! $product->get_manage_stock() ) {
						$child->set_stock_status( $stock_status );
						$child->save();
					}
				}

				$product = {PLUGIN_CLASS_PREFIX}_Product_Variable::sync( $product, false );
			}

			$product->set_manage_stock( $manage_stock );
			$product->set_backorders( $backorders );
			$product->save();

			if ( ! $product->is_type( 'variable' ) ) {
				{FILE_NAME_PREFIX}_update_product_stock_status( $post_id, $stock_status );
			}

			{FILE_NAME_PREFIX}_update_product_stock( $post_id, $stock_amount );

		} else {
			$product->save();
			{FILE_NAME_PREFIX}_update_product_stock_status( $post_id, $stock_status );
		}

		do_action( '{PLUGIN_HOOK_CLASS_NAME}_product_quick_edit_save', $product );
	}

	/**
	 * Bulk edit.
	 *
	 * @param integer $post_id
	 * @param {PLUGIN_CLASS_PREFIX}_Product $product
	 */
	public function bulk_edit_save( $post_id, $product ) {
		$data_store        = $product->get_data_store();
		$old_regular_price = $product->get_regular_price();
		$old_sale_price    = $product->get_sale_price();

		// Save fields
		if ( ! empty( $_REQUEST['change_weight'] ) && isset( $_REQUEST['_weight'] ) ) {
			$product->set_weight( {FILE_NAME_PREFIX}_clean( stripslashes( $_REQUEST['_weight'] ) ) );
		}

		if ( ! empty( $_REQUEST['change_dimensions'] ) ) {
			if ( isset( $_REQUEST['_length'] ) ) {
				$product->set_length( {FILE_NAME_PREFIX}_clean( stripslashes( $_REQUEST['_length'] ) ) );
			}
			if ( isset( $_REQUEST['_width'] ) ) {
				$product->set_width( {FILE_NAME_PREFIX}_clean( stripslashes( $_REQUEST['_width'] ) ) );
			}
			if ( isset( $_REQUEST['_height'] ) ) {
				$product->set_height( {FILE_NAME_PREFIX}_clean( stripslashes( $_REQUEST['_height'] ) ) );
			}
		}

		if ( ! empty( $_REQUEST['_tax_status'] ) ) {
			$product->set_tax_status( {FILE_NAME_PREFIX}_clean( $_REQUEST['_tax_status'] ) );
		}

		if ( ! empty( $_REQUEST['_tax_class'] ) ) {
			$tax_class = {FILE_NAME_PREFIX}_clean( $_REQUEST['_tax_class'] );
			if ( 'standard' == $tax_class ) {
				$tax_class = '';
			}
			$product->set_tax_class( $tax_class );
		}

		if ( ! empty( $_REQUEST['_shipping_class'] ) ) {
			if ( '_no_shipping_class' === $_REQUEST['_shipping_class'] ) {
				$product->set_shipping_class_id( 0 );
			} else {
				$shipping_class_id = $data_store->get_shipping_class_id_by_slug( {FILE_NAME_PREFIX}_clean( $_REQUEST['_shipping_class'] ) );
				$product->set_shipping_class_id( $shipping_class_id );
			}
		}

		if ( ! empty( $_REQUEST['_visibility'] ) ) {
			$product->set_catalog_visibility( {FILE_NAME_PREFIX}_clean( $_REQUEST['_visibility'] ) );
		}

		if ( ! empty( $_REQUEST['_featured'] ) ) {
			$product->set_featured( stripslashes( $_REQUEST['_featured'] ) );
		}

		// Sold Individually
		if ( ! empty( $_REQUEST['_sold_individually'] ) ) {
			if ( 'yes' === $_REQUEST['_sold_individually'] ) {
				$product->set_sold_individually( 'yes' );
			} else {
				$product->set_sold_individually( '' );
			}
		}

		// Handle price - remove dates and set to lowest
		$change_price_product_types = apply_filters( '{PLUGIN_HOOK_CLASS_NAME}_bulk_edit_save_price_product_types', array( 'simple', 'external' ) );
		$can_product_type_change_price = false;
		foreach ( $change_price_product_types as $product_type ) {
			if ( $product->is_type( $product_type ) ) {
				$can_product_type_change_price = true;
				break;
			}
		}

		if ( $can_product_type_change_price ) {

			$price_changed = false;

			if ( ! empty( $_REQUEST['change_regular_price'] ) ) {
				$change_regular_price = absint( $_REQUEST['change_regular_price'] );
				$regular_price = esc_attr( stripslashes( $_REQUEST['_regular_price'] ) );

				switch ( $change_regular_price ) {
					case 1 :
						$new_price = $regular_price;
						break;
					case 2 :
						if ( strstr( $regular_price, '%' ) ) {
							$percent = str_replace( '%', '', $regular_price ) / 100;
							$new_price = $old_regular_price + ( round( $old_regular_price * $percent, {FILE_NAME_PREFIX}_get_price_decimals() ) );
						} else {
							$new_price = $old_regular_price + $regular_price;
						}
						break;
					case 3 :
						if ( strstr( $regular_price, '%' ) ) {
							$percent = str_replace( '%', '', $regular_price ) / 100;
							$new_price = max( 0, $old_regular_price - ( round( $old_regular_price * $percent, {FILE_NAME_PREFIX}_get_price_decimals() ) ) );
						} else {
							$new_price = max( 0, $old_regular_price - $regular_price );
						}
						break;

					default :
						break;
				}

				if ( isset( $new_price ) && $new_price != $old_regular_price ) {
					$price_changed = true;
					$new_price = round( $new_price, {FILE_NAME_PREFIX}_get_price_decimals() );
					$product->set_regular_price( $new_price );
				}
			}

			if ( ! empty( $_REQUEST['change_sale_price'] ) ) {
				$change_sale_price = absint( $_REQUEST['change_sale_price'] );
				$sale_price        = esc_attr( stripslashes( $_REQUEST['_sale_price'] ) );

				switch ( $change_sale_price ) {
					case 1 :
						$new_price = $sale_price;
						break;
					case 2 :
						if ( strstr( $sale_price, '%' ) ) {
							$percent = str_replace( '%', '', $sale_price ) / 100;
							$new_price = $old_sale_price + ( $old_sale_price * $percent );
						} else {
							$new_price = $old_sale_price + $sale_price;
						}
						break;
					case 3 :
						if ( strstr( $sale_price, '%' ) ) {
							$percent = str_replace( '%', '', $sale_price ) / 100;
							$new_price = max( 0, $old_sale_price - ( $old_sale_price * $percent ) );
						} else {
							$new_price = max( 0, $old_sale_price - $sale_price );
						}
						break;
					case 4 :
						if ( strstr( $sale_price, '%' ) ) {
							$percent = str_replace( '%', '', $sale_price ) / 100;
							$new_price = max( 0, $product->regular_price - ( $product->regular_price * $percent ) );
						} else {
							$new_price = max( 0, $product->regular_price - $sale_price );
						}
						break;

					default :
						break;
				}

				if ( isset( $new_price ) && $new_price != $old_sale_price ) {
					$price_changed = true;
					$new_price = ! empty( $new_price ) || '0' === $new_price ? round( $new_price, {FILE_NAME_PREFIX}_get_price_decimals() ) : '';
					$product->set_sale_price( $new_price );
				}
			}

			if ( $price_changed ) {
				$product->set_date_on_sale_to( '' );
				$product->set_date_on_sale_from( '' );

				if ( $product->get_regular_price() < $product->get_sale_price() ) {
					$product->set_sale_price( '' );
				}
			}
		}

		// Handle Stock Data
		$was_managing_stock = $product->get_manage_stock() ? 'yes' : 'no';
		$stock_status       = $product->get_stock_status();
		$backorders         = $product->get_backorders();

		$backorders   = ! empty( $_REQUEST['_backorders'] ) ? {FILE_NAME_PREFIX}_clean( $_REQUEST['_backorders'] ) : $backorders;
		$stock_status = ! empty( $_REQUEST['_stock_status'] ) ? {FILE_NAME_PREFIX}_clean( $_REQUEST['_stock_status'] ) : $stock_status;

		if ( ! empty( $_REQUEST['_manage_stock'] ) ) {
			$manage_stock = 'yes' === {FILE_NAME_PREFIX}_clean( $_REQUEST['_manage_stock'] ) && 'grouped' !== $product->product_type ? 'yes' : 'no';
		} else {
			$manage_stock = $was_managing_stock;
		}

		$stock_amount = 'yes' === $manage_stock && ! empty( $_REQUEST['change_stock'] ) ? {FILE_NAME_PREFIX}_stock_amount( $_REQUEST['_stock'] ) : $product->get_stock_quantity();

		if ( 'yes' === get_option( '{PLUGIN_HOOK_CLASS_NAME}_manage_stock' ) ) {

			// Apply product type constraints to stock status
			if ( $product->is_type( 'external' ) ) {
				// External always in stock
				$stock_status = 'instock';
			} elseif ( $product->is_type( 'variable' ) ) {
				// Stock status is always determined by children
				foreach ( $product->get_children() as $child_id ) {
					$child = {FILE_NAME_PREFIX}_get_product( $child_id );
					if ( ! $product->get_manage_stock() ) {
						$child->set_stock_status( $stock_status );
						$child->save();
					}
				}

				$product = {PLUGIN_CLASS_PREFIX}_Product_Variable::sync( $product, false );
			}

			$product->set_manage_stock( $manage_stock );
			$product->set_backorders( $backorders );
			$product->save();

			if ( ! $product->is_type( 'variable' ) ) {
				{FILE_NAME_PREFIX}_update_product_stock_status( $post_id, $stock_status );
			}

			{FILE_NAME_PREFIX}_update_product_stock( $post_id, $stock_amount );

		} else {
			$product->save();
			{FILE_NAME_PREFIX}_update_product_stock_status( $post_id, $stock_status );
		}

		do_action( '{PLUGIN_HOOK_CLASS_NAME}_product_bulk_edit_save', $product );
	}


	/**
	 * Show confirmation message that order status changed for number of orders.
	 */
	public function bulk_admin_notices() {
		global $post_type, $pagenow;

		// Bail out if not on shop order list page
		if ( 'edit.php' !== $pagenow || 'shop_order' !== $post_type ) {
			return;
		}

		$order_statuses = {FILE_NAME_PREFIX}_get_order_statuses();

		// Check if any status changes happened
		foreach ( $order_statuses as $slug => $name ) {

			if ( isset( $_REQUEST[ 'marked_' . str_replace( '{FILE_NAME_PREFIX}-', '', $slug ) ] ) ) {

				$number = isset( $_REQUEST['changed'] ) ? absint( $_REQUEST['changed'] ) : 0;
				/* translators: %s: orders count */
				$message = sprintf( _n( 'Order status changed.', '%s order statuses changed.', $number, '{TEXT_DOMAIN}' ), number_format_i18n( $number ) );
				echo '<div class="updated"><p>' . $message . '</p></div>';

				break;
			}
		}
	}


	/**
	 * Query vars for custom searches.
	 *
	 * @param mixed $public_query_vars
	 * @return array
	 */
	public function add_custom_query_var( $public_query_vars ) {
		$public_query_vars[] = 'sku';
		$public_query_vars[] = 'shop_order_search';

		return $public_query_vars;
	}


	/**
	 * Filters and sorting handler.
	 *
	 * @param  array $vars
	 * @return array
	 */
	public function request_query( $vars ) {
		global $typenow, $wp_query, $wp_post_statuses;

		if ( 'product' === $typenow ) {
			// Sorting
			if ( isset( $vars['orderby'] ) ) {
				if ( 'price' == $vars['orderby'] ) {
					$vars = array_merge( $vars, array(
						'meta_key'  => '_price',
						'orderby'   => 'meta_value_num',
					) );
				}
				if ( 'sku' == $vars['orderby'] ) {
					$vars = array_merge( $vars, array(
						'meta_key'  => '_sku',
						'orderby'   => 'meta_value',
					) );
				}
			}
		} elseif ( 'shop_coupon' === $typenow ) {

			if ( ! empty( $_GET['coupon_type'] ) ) {
				$vars['meta_key']   = 'discount_type';
				$vars['meta_value'] = {FILE_NAME_PREFIX}_clean( $_GET['coupon_type'] );
			}
		} elseif ( in_array( $typenow, {FILE_NAME_PREFIX}_get_order_types( 'order-meta-boxes' ) ) ) {

			// Filter the orders by the posted customer.
			if ( isset( $_GET['_customer_user'] ) && $_GET['_customer_user'] > 0 ) {
				$vars['meta_query'] = array(
					array(
						'key'   => '_customer_user',
						'value' => (int) $_GET['_customer_user'],
						'compare' => '=',
					),
				);
			}

			// Sorting
			if ( isset( $vars['orderby'] ) ) {
				if ( 'order_total' == $vars['orderby'] ) {
					$vars = array_merge( $vars, array(
						'meta_key'  => '_order_total',
						'orderby'   => 'meta_value_num',
					) );
				}
			}

			// Status
			if ( ! isset( $vars['post_status'] ) ) {
				$post_statuses = {FILE_NAME_PREFIX}_get_order_statuses();

				foreach ( $post_statuses as $status => $value ) {
					if ( isset( $wp_post_statuses[ $status ] ) && false === $wp_post_statuses[ $status ]->show_in_admin_all_list ) {
						unset( $post_statuses[ $status ] );
					}
				}

				$vars['post_status'] = array_keys( $post_statuses );
			}
		}

		return $vars;
	}



	/**
	 * Disable the auto-save functionality for Orders.
	 */
	public function disable_autosave() {
		global $post;

		if ( $post && in_array( get_post_type( $post->ID ), {FILE_NAME_PREFIX}_get_order_types( 'order-meta-boxes' ) ) ) {
			wp_dequeue_script( 'autosave' );
		}
	}

	/**
	 * Output extra data on post forms.
	 * @param  WP_Post $post
	 */
	public function edit_form_top( $post ) {
		echo '<input type="hidden" id="original_post_title" name="original_post_title" value="' . esc_attr( $post->post_title ) . '" />';
	}

	/**
	 * Change title boxes in admin.
	 * @param  string $text
	 * @param  object $post
	 * @return string
	 */
	public function enter_title_here( $text, $post ) {
		switch ( $post->post_type ) {
			case 'product' :
				$text = __( 'Product name', '{TEXT_DOMAIN}' );
			break;
			case 'shop_coupon' :
				$text = __( 'Coupon code', '{TEXT_DOMAIN}' );
			break;
		}

		return $text;
	}

	/**
	 * Print coupon description textarea field.
	 * @param WP_Post $post
	 */
	public function edit_form_after_title( $post ) {
		if ( 'shop_coupon' === $post->post_type ) {
			?>
			<textarea id="{TEXT_DOMAIN}-coupon-description" name="excerpt" cols="5" rows="2" placeholder="<?php esc_attr_e( 'Description (optional)', '{TEXT_DOMAIN}' ); ?>"><?php echo $post->post_excerpt; // This is already escaped in core ?></textarea>
			<?php
		}
	}

	/**
	 * Hidden default Meta-Boxes.
	 * @param  array  $hidden
	 * @param  object $screen
	 * @return array
	 */
	public function hidden_meta_boxes( $hidden, $screen ) {
		if ( 'product' === $screen->post_type && 'post' === $screen->base ) {
			$hidden = array_merge( $hidden, array( 'postcustom' ) );
		}

		return $hidden;
	}

	/**
	 * Filter the directory for uploads.
	 *
	 * @param array $pathdata
	 * @return array
	 */
	public function upload_dir( $pathdata ) {

		// Change upload dir for downloadable files
		if ( isset( $_POST['type'] ) && 'downloadable_product' == $_POST['type'] ) {

			if ( empty( $pathdata['subdir'] ) ) {
				$pathdata['path']   = $pathdata['path'] . '/{PLUGIN_HOOK_CLASS_NAME}_uploads';
				$pathdata['url']    = $pathdata['url'] . '/{PLUGIN_HOOK_CLASS_NAME}_uploads';
				$pathdata['subdir'] = '/{PLUGIN_HOOK_CLASS_NAME}_uploads';
			} else {
				$new_subdir = '/{PLUGIN_HOOK_CLASS_NAME}_uploads' . $pathdata['subdir'];

				$pathdata['path']   = str_replace( $pathdata['subdir'], $new_subdir, $pathdata['path'] );
				$pathdata['url']    = str_replace( $pathdata['subdir'], $new_subdir, $pathdata['url'] );
				$pathdata['subdir'] = str_replace( $pathdata['subdir'], $new_subdir, $pathdata['subdir'] );
			}
		}

		return $pathdata;
	}

	/**
	 * Disable DFW feature pointer.
	 */
	public function disable_dfw_feature_pointer() {
		$screen = get_current_screen();

		if ( $screen && 'product' === $screen->id && 'post' === $screen->base ) {
			remove_action( 'admin_print_footer_scripts', array( 'WP_Internal_Pointers', 'pointer_wp410_dfw' ) );
		}
	}



	/**
	 * Show blank slate.
	 *
	 * @param string $which
	 */
	public function maybe_render_blank_state( $which ) {
		global $post_type;

		if ( in_array( $post_type, array( 'shop_order', 'product', 'shop_coupon' ) ) && 'bottom' === $which ) {
			$counts = (array) wp_count_posts( $post_type );
			unset( $counts['auto-draft'] );
			$count  = array_sum( $counts );

			if ( 0 < $count ) {
				return;
			}

			echo '<div class="{TEXT_DOMAIN}-BlankState">';

			switch ( $post_type ) {
				case 'shop_order' :
					?>
					<h2 class="{TEXT_DOMAIN}-BlankState-message"><?php _e( 'When you receive a new order, it will appear here.', '{TEXT_DOMAIN}' ); ?></h2>
					<a class="{TEXT_DOMAIN}-BlankState-cta button-primary button" target="_blank" href="https://docs.{TEXT_DOMAIN}.com/document/managing-orders/?utm_source=blankslate&utm_medium=product&utm_content=ordersdoc&utm_campaign={TEXT_DOMAIN}plugin"><?php _e( 'Learn more about orders', '{TEXT_DOMAIN}' ); ?></a>
					<?php
				break;
				case 'shop_coupon' :
					?>
					<h2 class="{TEXT_DOMAIN}-BlankState-message"><?php _e( 'Coupons are a great way to offer discounts and rewards to your customers. They will appear here once created.', '{TEXT_DOMAIN}' ); ?></h2>
					<a class="{TEXT_DOMAIN}-BlankState-cta button-primary button" target="_blank" href="https://docs.{TEXT_DOMAIN}.com/document/coupon-management/?utm_source=blankslate&utm_medium=product&utm_content=couponsdoc&utm_campaign={TEXT_DOMAIN}plugin"><?php _e( 'Learn more about coupons', '{TEXT_DOMAIN}' ); ?></a>
					<?php
				break;
				case 'product' :
					?>
					<h2 class="{TEXT_DOMAIN}-BlankState-message"><?php _e( 'Ready to start selling something awesome?', '{TEXT_DOMAIN}' ); ?></h2>
					<a class="{TEXT_DOMAIN}-BlankState-cta button-primary button" href="<?php echo esc_url( admin_url( 'post-new.php?post_type=product&tutorial=true' ) ); ?>"><?php _e( 'Create your first product!', '{TEXT_DOMAIN}' ); ?></a>
					<a class="{TEXT_DOMAIN}-BlankState-cta button" href="<?php echo esc_url( admin_url( 'edit.php?post_type=product&page=product_importer' ) ); ?>"><?php _e( 'Import products from a CSV file', '{TEXT_DOMAIN}' ); ?></a>
					<?php
				break;
			}

			echo '<style type="text/css">#posts-filter .wp-list-table, #posts-filter .tablenav.top, .tablenav.bottom .actions, .wrap .subsubsub  { display: none; } </style></div>';
		}
	}

	/**
	 * When editing the shop page, we should hide templates.
	 *
	 * @param array $page_templates
	 * @param $class
	 * @param object $post
	 *
	 * @return array
	 */
	public function hide_cpt_archive_templates( $page_templates, $class, $post ) {
		$shop_page_id = {FILE_NAME_PREFIX}_get_page_id( 'shop' );

		if ( $post && absint( $shop_page_id ) === absint( $post->ID ) ) {
			$page_templates = array();
		}

		return $page_templates;
	}

	/**
	 * Show a notice above the CPT archive.
	 *
	 * @param object $post
	 */
	public function show_cpt_archive_notice( $post ) {
		$shop_page_id = {FILE_NAME_PREFIX}_get_page_id( 'shop' );

		if ( $post && absint( $shop_page_id ) === absint( $post->ID ) ) {
			?>
			<div class="notice notice-info">
				<p><?php printf( __( 'This is the {PLUGIN_NAME} shop page. The shop page is a special archive that lists your products. <a href="%s">You can read more about this here</a>.', '{TEXT_DOMAIN}' ), 'https://docs.{TEXT_DOMAIN}.com/document/{TEXT_DOMAIN}-pages/#section-4' ); ?></p>
			</div>
			<?php
		}
	}
}

endif;

new {PLUGIN_CLASS_PREFIX}_Admin_Post_Types();

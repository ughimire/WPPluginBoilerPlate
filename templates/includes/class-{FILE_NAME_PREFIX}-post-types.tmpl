<?php
/**
 * Post Types
 *
 * Registers post types and taxonomies.
 *
 * @class     {PLUGIN_CLASS_PREFIX}_Post_types
 * @version   2.5.0
 * @package   {PLUGIN_MAIN_CLASS_NAME}/Classes/Products
 * @category  Class
 * @author    {AUTHOR}
 */

if ( ! defined( 'ABSPATH' ) ) {
	exit;
}

/**
 * {PLUGIN_CLASS_PREFIX}_Post_types Class.
 */
class {PLUGIN_CLASS_PREFIX}_Post_types {

	/**
	 * Hook in methods.
	 */
	public static function init() {
		add_action( 'init', array( __CLASS__, 'register_taxonomies' ), 5 );
		add_action( 'init', array( __CLASS__, 'register_post_types' ), 5 );
		add_action( 'init', array( __CLASS__, 'register_post_status' ), 9 );
		add_action( 'init', array( __CLASS__, 'support_jetpack_omnisearch' ) );
		add_filter( 'rest_api_allowed_post_types', array( __CLASS__, 'rest_api_allowed_post_types' ) );
		add_action( '{PLUGIN_HOOK_CLASS_NAME}_flush_rewrite_rules', array( __CLASS__, 'flush_rewrite_rules' ) );
	}

	/**
	 * Register core taxonomies.
	 */
	public static function register_taxonomies() {

		if ( ! is_blog_installed() ) {
			return;
		}

		if ( taxonomy_exists( 'product_type' ) ) {
			return;
		}

		do_action( '{PLUGIN_HOOK_CLASS_NAME}_register_taxonomy' );

		$permalinks = {FILE_NAME_PREFIX}_get_permalink_structure();

		register_taxonomy( 'product_type',
			apply_filters( '{PLUGIN_HOOK_CLASS_NAME}_taxonomy_objects_product_type', array( 'product' ) ),
			apply_filters( '{PLUGIN_HOOK_CLASS_NAME}_taxonomy_args_product_type', array(
				'hierarchical'      => false,
'show_ui'           => false,
'show_in_nav_menus' => false,
'query_var'         => is_admin(),
'rewrite'           => false,
'public'            => false,
) )
);

register_taxonomy( 'product_visibility',
apply_filters( '{PLUGIN_HOOK_CLASS_NAME}_taxonomy_objects_product_visibility', array( 'product', 'product_variation' ) ),
apply_filters( '{PLUGIN_HOOK_CLASS_NAME}_taxonomy_args_product_visibility', array(
'hierarchical'      => false,
'show_ui'           => false,
'show_in_nav_menus' => false,
'query_var'         => is_admin(),
'rewrite'           => false,
'public'            => false,
) )
);

register_taxonomy( 'product_cat',
apply_filters( '{PLUGIN_HOOK_CLASS_NAME}_taxonomy_objects_product_cat', array( 'product' ) ),
apply_filters( '{PLUGIN_HOOK_CLASS_NAME}_taxonomy_args_product_cat', array(
'hierarchical'          => true,
'update_count_callback' => '_{FILE_NAME_PREFIX}_term_recount',
'label'                 => __( 'Categories', '{TEXT_DOMAIN}' ),
'labels' => array(
'name'              => __( 'Product categories', '{TEXT_DOMAIN}' ),
'singular_name'     => __( 'Category', '{TEXT_DOMAIN}' ),
'menu_name'         => _x( 'Categories', 'Admin menu name', '{TEXT_DOMAIN}' ),
'search_items'      => __( 'Search categories', '{TEXT_DOMAIN}' ),
'all_items'         => __( 'All categories', '{TEXT_DOMAIN}' ),
'parent_item'       => __( 'Parent category', '{TEXT_DOMAIN}' ),
'parent_item_colon' => __( 'Parent category:', '{TEXT_DOMAIN}' ),
'edit_item'         => __( 'Edit category', '{TEXT_DOMAIN}' ),
'update_item'       => __( 'Update category', '{TEXT_DOMAIN}' ),
'add_new_item'      => __( 'Add new category', '{TEXT_DOMAIN}' ),
'new_item_name'     => __( 'New category name', '{TEXT_DOMAIN}' ),
'not_found'         => __( 'No categories found', '{TEXT_DOMAIN}' ),
),
'show_ui'               => true,
'query_var'             => true,
'capabilities'          => array(
'manage_terms' => 'manage_product_terms',
'edit_terms'   => 'edit_product_terms',
'delete_terms' => 'delete_product_terms',
'assign_terms' => 'assign_product_terms',
),
'rewrite'          => array(
'slug'         => $permalinks['category_rewrite_slug'],
'with_front'   => false,
'hierarchical' => true,
),
) )
);

register_taxonomy( 'product_tag',
apply_filters( '{PLUGIN_HOOK_CLASS_NAME}_taxonomy_objects_product_tag', array( 'product' ) ),
apply_filters( '{PLUGIN_HOOK_CLASS_NAME}_taxonomy_args_product_tag', array(
'hierarchical'          => false,
'update_count_callback' => '_{FILE_NAME_PREFIX}_term_recount',
'label'                 => __( 'Product tags', '{TEXT_DOMAIN}' ),
'labels'                => array(
'name'                       => __( 'Product tags', '{TEXT_DOMAIN}' ),
'singular_name'              => __( 'Tag', '{TEXT_DOMAIN}' ),
'menu_name'                  => _x( 'Tags', 'Admin menu name', '{TEXT_DOMAIN}' ),
'search_items'               => __( 'Search tags', '{TEXT_DOMAIN}' ),
'all_items'                  => __( 'All tags', '{TEXT_DOMAIN}' ),
'edit_item'                  => __( 'Edit tag', '{TEXT_DOMAIN}' ),
'update_item'                => __( 'Update tag', '{TEXT_DOMAIN}' ),
'add_new_item'               => __( 'Add new tag', '{TEXT_DOMAIN}' ),
'new_item_name'              => __( 'New tag name', '{TEXT_DOMAIN}' ),
'popular_items'              => __( 'Popular tags', '{TEXT_DOMAIN}' ),
'separate_items_with_commas' => __( 'Separate tags with commas', '{TEXT_DOMAIN}' ),
'add_or_remove_items'        => __( 'Add or remove tags', '{TEXT_DOMAIN}' ),
'choose_from_most_used'      => __( 'Choose from the most used tags', '{TEXT_DOMAIN}' ),
'not_found'                  => __( 'No tags found', '{TEXT_DOMAIN}' ),
),
'show_ui'               => true,
'query_var'             => true,
'capabilities'          => array(
'manage_terms' => 'manage_product_terms',
'edit_terms'   => 'edit_product_terms',
'delete_terms' => 'delete_product_terms',
'assign_terms' => 'assign_product_terms',
),
'rewrite'               => array(
'slug'       => $permalinks['tag_rewrite_slug'],
'with_front' => false,
),
) )
);

register_taxonomy( 'product_shipping_class',
apply_filters( '{PLUGIN_HOOK_CLASS_NAME}_taxonomy_objects_product_shipping_class', array( 'product', 'product_variation' ) ),
apply_filters( '{PLUGIN_HOOK_CLASS_NAME}_taxonomy_args_product_shipping_class', array(
'hierarchical'          => false,
'update_count_callback' => '_update_post_term_count',
'label'                 => __( 'Shipping classes', '{TEXT_DOMAIN}' ),
'labels' => array(
'name'              => __( 'Product shipping classes', '{TEXT_DOMAIN}' ),
'singular_name'     => __( 'Shipping class', '{TEXT_DOMAIN}' ),
'menu_name'         => _x( 'Shipping classes', 'Admin menu name', '{TEXT_DOMAIN}' ),
'search_items'      => __( 'Search shipping classes', '{TEXT_DOMAIN}' ),
'all_items'         => __( 'All shipping classes', '{TEXT_DOMAIN}' ),
'parent_item'       => __( 'Parent shipping class', '{TEXT_DOMAIN}' ),
'parent_item_colon' => __( 'Parent shipping class:', '{TEXT_DOMAIN}' ),
'edit_item'         => __( 'Edit shipping class', '{TEXT_DOMAIN}' ),
'update_item'       => __( 'Update shipping class', '{TEXT_DOMAIN}' ),
'add_new_item'      => __( 'Add new shipping class', '{TEXT_DOMAIN}' ),
'new_item_name'     => __( 'New shipping class Name', '{TEXT_DOMAIN}' ),
),
'show_ui'               => false,
'show_in_quick_edit'    => false,
'show_in_nav_menus'     => false,
'query_var'             => is_admin(),
'capabilities'          => array(
'manage_terms' => 'manage_product_terms',
'edit_terms'   => 'edit_product_terms',
'delete_terms' => 'delete_product_terms',
'assign_terms' => 'assign_product_terms',
),
'rewrite'               => false,
) )
);

global ${FILE_NAME_PREFIX}_product_attributes;

${FILE_NAME_PREFIX}_product_attributes = array();

if ( $attribute_taxonomies = {FILE_NAME_PREFIX}_get_attribute_taxonomies() ) {
foreach ( $attribute_taxonomies as $tax ) {
if ( $name = {FILE_NAME_PREFIX}_attribute_taxonomy_name( $tax->attribute_name ) ) {
$tax->attribute_public          = absint( isset( $tax->attribute_public ) ? $tax->attribute_public : 1 );
$label                          = ! empty( $tax->attribute_label ) ? $tax->attribute_label : $tax->attribute_name;
${FILE_NAME_PREFIX}_product_attributes[ $name ] = $tax;
$taxonomy_data                  = array(
'hierarchical'          => false,
'update_count_callback' => '_update_post_term_count',
'labels'                => array(
'name'              => sprintf( _x( 'Product %s', 'Product Attribute', '{TEXT_DOMAIN}' ), $label ),
'singular_name'     => $label,
'search_items'      => sprintf( __( 'Search %s', '{TEXT_DOMAIN}' ), $label ),
'all_items'         => sprintf( __( 'All %s', '{TEXT_DOMAIN}' ), $label ),
'parent_item'       => sprintf( __( 'Parent %s', '{TEXT_DOMAIN}' ), $label ),
'parent_item_colon' => sprintf( __( 'Parent %s:', '{TEXT_DOMAIN}' ), $label ),
'edit_item'         => sprintf( __( 'Edit %s', '{TEXT_DOMAIN}' ), $label ),
'update_item'       => sprintf( __( 'Update %s', '{TEXT_DOMAIN}' ), $label ),
'add_new_item'      => sprintf( __( 'Add new %s', '{TEXT_DOMAIN}' ), $label ),
'new_item_name'     => sprintf( __( 'New %s', '{TEXT_DOMAIN}' ), $label ),
'not_found'         => sprintf( __( 'No &quot;%s&quot; found', '{TEXT_DOMAIN}' ), $label ),
),
'show_ui'            => true,
'show_in_quick_edit' => false,
'show_in_menu'       => false,
'meta_box_cb'        => false,
'query_var'          => 1 === $tax->attribute_public,
'rewrite'            => false,
'sort'               => false,
'public'             => 1 === $tax->attribute_public,
'show_in_nav_menus'  => 1 === $tax->attribute_public && apply_filters( '{PLUGIN_HOOK_CLASS_NAME}_attribute_show_in_nav_menus', false, $name ),
'capabilities'       => array(
'manage_terms' => 'manage_product_terms',
'edit_terms'   => 'edit_product_terms',
'delete_terms' => 'delete_product_terms',
'assign_terms' => 'assign_product_terms',
),
);

if ( 1 === $tax->attribute_public && sanitize_title( $tax->attribute_name ) ) {
$taxonomy_data['rewrite'] = array(
'slug'         => trailingslashit( $permalinks['attribute_rewrite_slug'] ) . sanitize_title( $tax->attribute_name ),
'with_front'   => false,
'hierarchical' => true,
);
}

register_taxonomy( $name, apply_filters( "{PLUGIN_HOOK_CLASS_NAME}_taxonomy_objects_{$name}", array( 'product' ) ), apply_filters( "{PLUGIN_HOOK_CLASS_NAME}_taxonomy_args_{$name}", $taxonomy_data ) );
}
}
}

do_action( '{PLUGIN_HOOK_CLASS_NAME}_after_register_taxonomy' );
}

/**
* Register core post types.
*/
public static function register_post_types() {
if ( ! is_blog_installed() || post_type_exists( 'product' ) ) {
return;
}

do_action( '{PLUGIN_HOOK_CLASS_NAME}_register_post_type' );

$permalinks = {FILE_NAME_PREFIX}_get_permalink_structure();
$supports = array( 'title', 'editor', 'excerpt', 'thumbnail', 'custom-fields', 'publicize', 'wpcom-markdown' );

if ( 'yes' === get_option( '{PLUGIN_HOOK_CLASS_NAME}_enable_reviews', 'yes' ) ) {
$supports[] = 'comments';
}

register_post_type( 'product',
apply_filters( '{PLUGIN_HOOK_CLASS_NAME}_register_post_type_product',
array(
'labels'              => array(
'name'                  => __( 'Products', '{TEXT_DOMAIN}' ),
'singular_name'         => __( 'Product', '{TEXT_DOMAIN}' ),
'all_items'             => __( 'All Products', '{TEXT_DOMAIN}' ),
'menu_name'             => _x( 'Products', 'Admin menu name', '{TEXT_DOMAIN}' ),
'add_new'               => __( 'Add New', '{TEXT_DOMAIN}' ),
'add_new_item'          => __( 'Add new product', '{TEXT_DOMAIN}' ),
'edit'                  => __( 'Edit', '{TEXT_DOMAIN}' ),
'edit_item'             => __( 'Edit product', '{TEXT_DOMAIN}' ),
'new_item'              => __( 'New product', '{TEXT_DOMAIN}' ),
'view'                  => __( 'View product', '{TEXT_DOMAIN}' ),
'view_item'             => __( 'View product', '{TEXT_DOMAIN}' ),
'search_items'          => __( 'Search products', '{TEXT_DOMAIN}' ),
'not_found'             => __( 'No products found', '{TEXT_DOMAIN}' ),
'not_found_in_trash'    => __( 'No products found in trash', '{TEXT_DOMAIN}' ),
'parent'                => __( 'Parent product', '{TEXT_DOMAIN}' ),
'featured_image'        => __( 'Product image', '{TEXT_DOMAIN}' ),
'set_featured_image'    => __( 'Set product image', '{TEXT_DOMAIN}' ),
'remove_featured_image' => __( 'Remove product image', '{TEXT_DOMAIN}' ),
'use_featured_image'    => __( 'Use as product image', '{TEXT_DOMAIN}' ),
'insert_into_item'      => __( 'Insert into product', '{TEXT_DOMAIN}' ),
'uploaded_to_this_item' => __( 'Uploaded to this product', '{TEXT_DOMAIN}' ),
'filter_items_list'     => __( 'Filter products', '{TEXT_DOMAIN}' ),
'items_list_navigation' => __( 'Products navigation', '{TEXT_DOMAIN}' ),
'items_list'            => __( 'Products list', '{TEXT_DOMAIN}' ),
),
'description'         => __( 'This is where you can add new products to your store.', '{TEXT_DOMAIN}' ),
'public'              => true,
'show_ui'             => true,
'capability_type'     => 'product',
'map_meta_cap'        => true,
'publicly_queryable'  => true,
'exclude_from_search' => false,
'hierarchical'        => false, // Hierarchical causes memory issues - WP loads all records!
'rewrite'             => $permalinks['product_rewrite_slug'] ? array( 'slug' => $permalinks['product_rewrite_slug'], 'with_front' => false, 'feeds' => true ) : false,
'query_var'           => true,
'supports'            => $supports,
'has_archive'         => ( $shop_page_id = {FILE_NAME_PREFIX}_get_page_id( 'shop' ) ) && get_post( $shop_page_id ) ? urldecode( get_page_uri( $shop_page_id ) ) : 'shop',
'show_in_nav_menus'   => true,
'show_in_rest'        => true,
)
)
);

register_post_type( 'product_variation',
apply_filters( '{PLUGIN_HOOK_CLASS_NAME}_register_post_type_product_variation',
array(
'label'           => __( 'Variations', '{TEXT_DOMAIN}' ),
'public'          => false,
'hierarchical'    => false,
'supports'        => false,
'capability_type' => 'product',
'rewrite'         => false,
)
)
);

{FILE_NAME_PREFIX}_register_order_type(
'shop_order',
apply_filters( '{PLUGIN_HOOK_CLASS_NAME}_register_post_type_shop_order',
array(
'labels'              => array(
'name'                  => __( 'Orders', '{TEXT_DOMAIN}' ),
'singular_name'         => _x( 'Order', 'shop_order post type singular name', '{TEXT_DOMAIN}' ),
'add_new'               => __( 'Add order', '{TEXT_DOMAIN}' ),
'add_new_item'          => __( 'Add new order', '{TEXT_DOMAIN}' ),
'edit'                  => __( 'Edit', '{TEXT_DOMAIN}' ),
'edit_item'             => __( 'Edit order', '{TEXT_DOMAIN}' ),
'new_item'              => __( 'New order', '{TEXT_DOMAIN}' ),
'view'                  => __( 'View order', '{TEXT_DOMAIN}' ),
'view_item'             => __( 'View order', '{TEXT_DOMAIN}' ),
'search_items'          => __( 'Search orders', '{TEXT_DOMAIN}' ),
'not_found'             => __( 'No orders found', '{TEXT_DOMAIN}' ),
'not_found_in_trash'    => __( 'No orders found in trash', '{TEXT_DOMAIN}' ),
'parent'                => __( 'Parent orders', '{TEXT_DOMAIN}' ),
'menu_name'             => _x( 'Orders', 'Admin menu name', '{TEXT_DOMAIN}' ),
'filter_items_list'     => __( 'Filter orders', '{TEXT_DOMAIN}' ),
'items_list_navigation' => __( 'Orders navigation', '{TEXT_DOMAIN}' ),
'items_list'            => __( 'Orders list', '{TEXT_DOMAIN}' ),
),
'description'         => __( 'This is where store orders are stored.', '{TEXT_DOMAIN}' ),
'public'              => false,
'show_ui'             => true,
'capability_type'     => 'shop_order',
'map_meta_cap'        => true,
'publicly_queryable'  => false,
'exclude_from_search' => true,
'show_in_menu'        => current_user_can( 'manage_{PLUGIN_HOOK_CLASS_NAME}' ) ? '{TEXT_DOMAIN}' : true,
'hierarchical'        => false,
'show_in_nav_menus'   => false,
'rewrite'             => false,
'query_var'           => false,
'supports'            => array( 'title', 'comments', 'custom-fields' ),
'has_archive'         => false,
)
)
);

{FILE_NAME_PREFIX}_register_order_type(
'shop_order_refund',
apply_filters( '{PLUGIN_HOOK_CLASS_NAME}_register_post_type_shop_order_refund',
array(
'label'                            => __( 'Refunds', '{TEXT_DOMAIN}' ),
'capability_type'                  => 'shop_order',
'public'                           => false,
'hierarchical'                     => false,
'supports'                         => false,
'exclude_from_orders_screen'       => false,
'add_order_meta_boxes'             => false,
'exclude_from_order_count'         => true,
'exclude_from_order_views'         => false,
'exclude_from_order_reports'       => false,
'exclude_from_order_sales_reports' => true,
'class_name'                       => '{PLUGIN_CLASS_PREFIX}_Order_Refund',
'rewrite'                          => false,
)
)
);

if ( 'yes' == get_option( '{PLUGIN_HOOK_CLASS_NAME}_enable_coupons' ) ) {
register_post_type( 'shop_coupon',
apply_filters( '{PLUGIN_HOOK_CLASS_NAME}_register_post_type_shop_coupon',
array(
'labels'              => array(
'name'                  => __( 'Coupons', '{TEXT_DOMAIN}' ),
'singular_name'         => __( 'Coupon', '{TEXT_DOMAIN}' ),
'menu_name'             => _x( 'Coupons', 'Admin menu name', '{TEXT_DOMAIN}' ),
'add_new'               => __( 'Add coupon', '{TEXT_DOMAIN}' ),
'add_new_item'          => __( 'Add new coupon', '{TEXT_DOMAIN}' ),
'edit'                  => __( 'Edit', '{TEXT_DOMAIN}' ),
'edit_item'             => __( 'Edit coupon', '{TEXT_DOMAIN}' ),
'new_item'              => __( 'New coupon', '{TEXT_DOMAIN}' ),
'view'                  => __( 'View coupons', '{TEXT_DOMAIN}' ),
'view_item'             => __( 'View coupon', '{TEXT_DOMAIN}' ),
'search_items'          => __( 'Search coupons', '{TEXT_DOMAIN}' ),
'not_found'             => __( 'No coupons found', '{TEXT_DOMAIN}' ),
'not_found_in_trash'    => __( 'No coupons found in trash', '{TEXT_DOMAIN}' ),
'parent'                => __( 'Parent coupon', '{TEXT_DOMAIN}' ),
'filter_items_list'     => __( 'Filter coupons', '{TEXT_DOMAIN}' ),
'items_list_navigation' => __( 'Coupons navigation', '{TEXT_DOMAIN}' ),
'items_list'            => __( 'Coupons list', '{TEXT_DOMAIN}' ),
),
'description'         => __( 'This is where you can add new coupons that customers can use in your store.', '{TEXT_DOMAIN}' ),
'public'              => false,
'show_ui'             => true,
'capability_type'     => 'shop_coupon',
'map_meta_cap'        => true,
'publicly_queryable'  => false,
'exclude_from_search' => true,
'show_in_menu'        => current_user_can( 'manage_{PLUGIN_HOOK_CLASS_NAME}' ) ? '{TEXT_DOMAIN}' : true,
'hierarchical'        => false,
'rewrite'             => false,
'query_var'           => false,
'supports'            => array( 'title' ),
'show_in_nav_menus'   => false,
'show_in_admin_bar'   => true,
)
)
);
}

register_post_type( 'shop_webhook',
apply_filters( '{PLUGIN_HOOK_CLASS_NAME}_register_post_type_shop_webhook',
array(
'labels'              => array(
'name'               => __( 'Webhooks', '{TEXT_DOMAIN}' ),
'singular_name'      => __( 'Webhook', '{TEXT_DOMAIN}' ),
'menu_name'          => _x( 'Webhooks', 'Admin menu name', '{TEXT_DOMAIN}' ),
'add_new'            => __( 'Add webhook', '{TEXT_DOMAIN}' ),
'add_new_item'       => __( 'Add new webhook', '{TEXT_DOMAIN}' ),
'edit'               => __( 'Edit', '{TEXT_DOMAIN}' ),
'edit_item'          => __( 'Edit webhook', '{TEXT_DOMAIN}' ),
'new_item'           => __( 'New webhook', '{TEXT_DOMAIN}' ),
'view'               => __( 'View webhooks', '{TEXT_DOMAIN}' ),
'view_item'          => __( 'View webhook', '{TEXT_DOMAIN}' ),
'search_items'       => __( 'Search webhooks', '{TEXT_DOMAIN}' ),
'not_found'          => __( 'No webhooks found', '{TEXT_DOMAIN}' ),
'not_found_in_trash' => __( 'No webhooks found in trash', '{TEXT_DOMAIN}' ),
'parent'             => __( 'Parent webhook', '{TEXT_DOMAIN}' ),
),
'public'              => false,
'show_ui'             => true,
'capability_type'     => 'shop_webhook',
'map_meta_cap'        => true,
'publicly_queryable'  => false,
'exclude_from_search' => true,
'show_in_menu'        => false,
'hierarchical'        => false,
'rewrite'             => false,
'query_var'           => false,
'supports'            => false,
'show_in_nav_menus'   => false,
'show_in_admin_bar'   => false,
)
)
);

do_action( '{PLUGIN_HOOK_CLASS_NAME}_after_register_post_type' );
}

/**
* Register our custom post statuses, used for order status.
*/
public static function register_post_status() {

$order_statuses = apply_filters( '{PLUGIN_HOOK_CLASS_NAME}_register_shop_order_post_statuses',
array(
'wc-pending'    => array(
'label'                     => _x( 'Pending payment', 'Order status', '{TEXT_DOMAIN}' ),
'public'                    => false,
'exclude_from_search'       => false,
'show_in_admin_all_list'    => true,
'show_in_admin_status_list' => true,
'label_count'               => _n_noop( 'Pending payment <span class="count">(%s)</span>', 'Pending payment <span class="count">(%s)</span>', '{TEXT_DOMAIN}' ),
),
'wc-processing' => array(
'label'                     => _x( 'Processing', 'Order status', '{TEXT_DOMAIN}' ),
'public'                    => false,
'exclude_from_search'       => false,
'show_in_admin_all_list'    => true,
'show_in_admin_status_list' => true,
'label_count'               => _n_noop( 'Processing <span class="count">(%s)</span>', 'Processing <span class="count">(%s)</span>', '{TEXT_DOMAIN}' ),
),
'wc-on-hold'    => array(
'label'                     => _x( 'On hold', 'Order status', '{TEXT_DOMAIN}' ),
'public'                    => false,
'exclude_from_search'       => false,
'show_in_admin_all_list'    => true,
'show_in_admin_status_list' => true,
'label_count'               => _n_noop( 'On hold <span class="count">(%s)</span>', 'On hold <span class="count">(%s)</span>', '{TEXT_DOMAIN}' ),
),
'wc-completed'  => array(
'label'                     => _x( 'Completed', 'Order status', '{TEXT_DOMAIN}' ),
'public'                    => false,
'exclude_from_search'       => false,
'show_in_admin_all_list'    => true,
'show_in_admin_status_list' => true,
'label_count'               => _n_noop( 'Completed <span class="count">(%s)</span>', 'Completed <span class="count">(%s)</span>', '{TEXT_DOMAIN}' ),
),
'wc-cancelled'  => array(
'label'                     => _x( 'Cancelled', 'Order status', '{TEXT_DOMAIN}' ),
'public'                    => false,
'exclude_from_search'       => false,
'show_in_admin_all_list'    => true,
'show_in_admin_status_list' => true,
'label_count'               => _n_noop( 'Cancelled <span class="count">(%s)</span>', 'Cancelled <span class="count">(%s)</span>', '{TEXT_DOMAIN}' ),
),
'wc-refunded'   => array(
'label'                     => _x( 'Refunded', 'Order status', '{TEXT_DOMAIN}' ),
'public'                    => false,
'exclude_from_search'       => false,
'show_in_admin_all_list'    => true,
'show_in_admin_status_list' => true,
'label_count'               => _n_noop( 'Refunded <span class="count">(%s)</span>', 'Refunded <span class="count">(%s)</span>', '{TEXT_DOMAIN}' ),
),
'wc-failed'     => array(
'label'                     => _x( 'Failed', 'Order status', '{TEXT_DOMAIN}' ),
'public'                    => false,
'exclude_from_search'       => false,
'show_in_admin_all_list'    => true,
'show_in_admin_status_list' => true,
'label_count'               => _n_noop( 'Failed <span class="count">(%s)</span>', 'Failed <span class="count">(%s)</span>', '{TEXT_DOMAIN}' ),
),
)
);

foreach ( $order_statuses as $order_status => $values ) {
register_post_status( $order_status, $values );
}
}

/**
* Flush rewrite rules.
*/
public static function flush_rewrite_rules() {
flush_rewrite_rules();
}

/**
* Add Product Support to Jetpack Omnisearch.
*/
public static function support_jetpack_omnisearch() {
if ( class_exists( 'Jetpack_Omnisearch_Posts' ) ) {
new Jetpack_Omnisearch_Posts( 'product' );
}
}

/**
* Added product for Jetpack related posts.
*
* @param  array $post_types
* @return array
*/
public static function rest_api_allowed_post_types( $post_types ) {
$post_types[] = 'product';

return $post_types;
}
}

{PLUGIN_CLASS_PREFIX}_Post_types::init();
